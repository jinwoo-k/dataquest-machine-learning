= Logistic Regression
Learn the basics of logistic regression and classification.

== 1. Classification
* 선형 회귀
  ** 지도학습의 일종 (Supervised learning)
  ** 타겟이 크고 작음이 있으며(ordered), 연속적(continuous)일때 사용 가능
* 로지스틱 회귀
  ** 타겟이 범주형 데이터인 경우 사용 가능 (이진, Multi-class 존재)
  ** 범주를 숫자로 표현 (ex - binary classification true: 1, flase: 0)

== 2. Introduction to the data
* 대학교 입학가능 여부를 예측한다.
* 포함된 컬럼
  ** gre : Graduate Record Exam
  ** gpa : college grade point average.
  ** admit : 0 - reject, 1 - admitted
* gre와 gpa 컬럼을 이용해 admit 을 예측한다.

[source,python]
----
import pandas as pd
import matplotlib.pyplot as plt

admissions = pd.read_csv('admissions.csv')

plt.scatter(x=admissions['gpa'], y=admissions['admit'])
plt.show()
----

image::./images/m1_2_1.png[, 400]

== 3. Logistic regression
* 분류(classification)
  ** 독립변수를 이용해 범주형 데이터인 종속 변수를 추정
* 로지스틱 회귀(logistic regression)
  ** 분류의 한가지 기법
  ** 확률값을 이용하며 임계치를 넘는 경우 1, 그렇지 않은경우 0으로 판단.

== 4. Logit function
* 선형 회귀 분석에서는 독립 변수와 종속 변수 간의 관계를 나타 내기 위해 선형 함수 y = mx + b를 사용
* 로지스틱 회귀 분석에서는 분류에 적용되는 선형 함수인 logit 함수를 사용
* 로짓 함수의 결과는 확률 값으로 0과 1사이의 값을 가짐
* 로짓 함수는 두가지 키 파트로 구성  image:./images/m1_3_1.png[, 150]
  ** 모든 값을 양수로 변환하는 지수화(exponential transformation) image:./images/m1_3_2.png[, 50]
  ** 결과값을 0~1사이로 만들어주는 정규화(normalization transformation) image:./images/m1_3_3.png[, 80]

[source,python]
----
import numpy as np

# Logit Function
def logit(x):
    # np.exp(x) raises x to the exponential power, ie e^x. e ~= 2.71828
    return np.exp(x)  / (1 + np.exp(x))

# Generate 50 real values, evenly spaced, between -6 and 6.
x = np.linspace(-6,6,50, dtype=float)

# Transform each number in t using the logit function.
y = logit(x)

# Plot the resulting data.
plt.plot(x, y)
plt.ylabel("Probability")
plt.show()
----


== 5. Training a logistic regression model
* 로지스틱 회귀 모델을 만드는데 필요한 수학적 학습은 하지 않고, scikit-learn 을 이용한다.
[source,python]
----
from sklearn.linear_model import LogisticRegression
logistic_model = LogisticRegression()
logistic_model.fit(admissions[["gpa"]], admissions["admit"])
----

== 6. Plotting probabilities
* 로지스틱 회귀 모델의 결과는 행을 true 혹은 1로 표현해야할 확률이다. (predict_proba 메서드 활용)
[source,python]
----
import matplotlib.pyplot as plt

logistic_model = LogisticRegression()
logistic_model.fit(admissions[["gpa"]], admissions["admit"])
pred_probs = logistic_model.predict_proba(admissions[["gpa"]])

print(pred_probs[:, 1])
plt.scatter(admissions["gpa"], pred_probs[:, 1])
----

== 7. Predict labels
* scatter plot 를 통해 gpa 와 admit 사이의 선형 관계가 드러났다. 이는 로지스틱 회귀 역시 선형 회귀의 한가지 사례임을 나타낸다.
* predict 메서드를 이용해 트레이닝 셋의 각 행에 대한 예측을 해본다.

[source, python]
----
logistic_model = LogisticRegression()
logistic_model.fit(admissions[["gpa"]], admissions["admit"])
fitted_labels = logistic_model.predict(admissions[["gpa"]])

se = pd.Series(fitted_labels.tolist())
admissions['label'] = se

print(len(admissions[admissions['admit'] == admissions['label']]))  # 416
print(len(admissions[admissions['admit'] != admissions['label']]))  # 228
print(len(admissions))  # 644
----
