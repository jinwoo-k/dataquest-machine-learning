== Building a Decision Tree
=== 1. Introduction to the Data
* 이전에 사용한 1994년 미국 수입 데이터,
* 목표 컬럼인 high_income 은 연간 50k 이하 (0), 50k 초과 (1) 의 급여 상태
* ref : http://archive.ics.uci.edu/ml/datasets/Adult[data]

=== 2. Overview of the ID3 Algorithm
* 이전에 우린 엔트로피와 정보획득을 포함한 의사결정트리의 기초 배움
* 트리를 구성하기 위해 ID3 알고리즘 사용
** 이 알고리즘은 재귀와 시간 복잡성의 이해를 포함함.
* 일반적으로 재귀는 큰 문제를 작은 덩어리로 분할하는 과정. 스스로를 호출후 다음 결과를 최종 출력으로 결합
* 트리를 만드는 것은 재귀 알고리즘의 완벽한 사용 예이다.
* 아래에 ID3 알고리즘의 의사코드 버전
```
def id3(data, target, columns)
    1 Create a node for the tree
    2 If all values of the target attribute are 1, Return the node, with label = 1
    3 If all values of the target attribute are 0, Return the node, with label = 0
    4 Using information gain, find A, the column that splits the data best
    5 Find the median value in column A
    6 Split column A into values below or equal to the median (0), and values above the median (1)
    7 For each possible value (0 or 1), vi, of A,
    8    Add a new tree branch below Root that corresponds to rows of data where A = vi
    9    Let Examples(vi) be the subset of examples that have the value vi for A
   10    Below this new branch add the subtree id3(data[A==vi], target, columns)
   11 Return Root
```
* 알고리즘을 약간 수정해 각 노드에서 두개의 분기만 생성. 이로써 트리 구성이 더 단순해지고 원리를 더 쉽게 봄
** 알고리즘의 재귀 특성은 10번째 줄에서 시작.

=== 3. Walking Through an Example of the ID3 Algorithm
* 더미 데이터로 예제 보기
** age 와 marital_status 로 high_income 예측해보기
** marital_status 에서 0 : 미혼, 1: 결혼, 2: 이혼
```
high_income    age    marital_status
0              20     0
0              60     2
0              40     1
1              25     1
1              35     2
1              55     1
```
* 알고리즘 시작
* high_income 에 0,1이 있기때문에 4번째 라인으로 감
** 정보 이득은 여기서 계산안하지만 나누는 열은 '나이'
** 5라인에서 중앙값 37.5 구함
** 6라인에서 중간값을 기준으로 0, 1로 나눔
** 7 라인에서 나이가 <= 37.5 인 데이터행은 왼쪽으로
image:./images/ex_node2.png[width="200px"]

```
<위의 new node가 가지는 값, 즉 나이 37.5 이하>
high_income    age    marital_status
0              20     0
1              25     1
1              35     2
```
* ID3 를 재귀로 호출하기 때문에 2,3라인을 또 넘어가고 중간 나이값인 25를 기준으로 나눔

image:./images/ex_node3.png[width="200px"]
```
<위 새 노드 값>
high_income    age    marital_status
0              20     0
1              25     1
```
* 또 재귀로 계산하여 22.5 나이로 분할

image:./images/ex_node4.png[width="200px"]

* 이제 드디어 마지막 node4 의 값이 모두 0. 그 의미는 알고리즘 3번째라인이 적용되어 재귀를 끝냄
** 이제 재귀에서 해제되고, 트리의 오른쪽으로 이동하여 다시 반복
** 이 함수도 라인2에서 멈추고 반환
* 이런식으로 왼쪽트리만 반복하고 나온 트리

image:./images/ex_node6.png[width="200px"]

=== 4. Determining the Column to Split On
* 이전 임무에서 엔트로피 및 정보획득 계산함수 작성함.
* 이제 데이터 셋트를 분리하는 데 사용할 열의 이름을 반환하는 함수 필요
```
def find_best_column(data, target_name, columns):
    information_gains = []
    # Loop through and compute information gains
    for col in columns:
        information_gain = calc_information_gain(data, col, "high_income")
        information_gains.append(information_gain)

    # Find the name of the column with the highest gain
    highest_gain_index = information_gains.index(max(information_gains))
    highest_gain = columns[highest_gain_index]
    return highest_gain


# A list of columns to potentially split income with
columns = ["age", "workclass", "education_num", "marital_status", "occupation", "relationship", "race", "sex", "hours_per_week", "native_country"]

income_split = find_best_column(income, "high_income", columns) # 'marital_status'
```
=== 5. Creating a Simple Recursive Algorithm
* 의사코드버전의 라인2,3과 달리 (원래는 레이블을 전체 트리 저장) 잎의 수를 계산
```
# We'll use lists to store our labels for nodes (when we find them)
# Lists can be accessed inside our recursive function, whereas integers can't.
# Look at the python missions on scoping for more information on this topic
label_1s = []
label_0s = []

def id3(data, target, columns):
    # The pandas.unique method will return a list of all the unique values in a series
    unique_targets = pandas.unique(data[target])

    if len(unique_targets) == 1:
        # Insert code here to append 1 to label_1s or 0 to label_0s, based on what we should label the node
        # See lines 2 and 3 in the algorithm

        # Returning here is critical -- if we don't, the recursive tree will never finish, and run forever
        # See our example above for when we returned
        if 0 in unique_targets:
            label_0s.append(0)
        elif 1 in unique_targets:
            label_1s.append(1)
        return

    # Find the best column to split on in our data
    best_column = find_best_column(data, target, columns)
    # Find the median of the column
    column_median = data[best_column].median()

    # Create the two splits
    left_split = data[data[best_column] <= column_median]
    right_split = data[data[best_column] > column_median]

    # Loop through the splits and call id3 recursively
    for split in [left_split, right_split]:
        # Call id3 recursively to process each branch
        id3(split, target, columns)

# Create the data set that we used in the example on the last screen
data = pandas.DataFrame([
    [0,20,0],
    [0,60,2],
    [0,40,1],
    [1,25,1],
    [1,35,2],
    [1,55,1]
    ])
# Assign column names to the data
data.columns = ["high_income", "age", "marital_status"]

# Call the function on our data to set the counters properly
id3(data, "high_income", ["age", "marital_status"])
print(label_0s) # [0, 0, 0]
print(label_1s) # [1, 1, 1]
```
=== 6. Storing the Tree
* 이제 leaf 레이블이 아닌 전체 트리에 저장 할 수 있음
** 이를 위해 중첩된 사전을 사용
** 사전으로 루트노드 표현하고 왼쪽 오른쪽 키를 가지고 분기 가능
** 분할할 열을 키 열로 저장하고 중앙값을 키 중앙값을 ㅗ저장
** 마지막으로 leaf 레이블을 키 레이블로 저장
** 또한 숫자키로 각 노드의 번호를 매기기
```
high_income    age    marital_status
0              20     0
0              60     2
0              40     1
1              25     1
1              35     2
1              55     1
```
```
{
   "left":{
      "left":{
         "left":{
            "number":4,
            "label":0
         },
         "column":"age",
         "median":22.5,
         "number":3,
         "right":{
            "number":5,
            "label":1
         }
      },
      "column":"age",
      "median":25.0,
      "number":2,
      "right":{
         "number":6,
         "label":1
      }
   },
   "column":"age",
   "median":37.5,
   "number":1,
   "right":{
      "left":{
         "left":{
            "number":9,
            "label":0
         },
         "column":"age",
         "median":47.5,
         "number":8,
         "right":{
            "number":10,
            "label":1
         }
      },
      "column":"age",
      "median":55.0,
      "number":7,
      "right":{
         "number":11,
         "label":0
      }
   }
}
```
* 사전을 사용하기 위해 의사코드를 수정
```
def id3(data, target, columns, tree)
    1 Create a node for the tree
    2 Number the node
    3 If all of the values of the target attribute are 1, assign 1 to the label key in tree
    4 If all of the values of the target attribute are 0, assign 0 to the label key in tree
    5 Using information gain, find A, the column that splits the data best
    6 Find the median value in column A
    7 Assign the column and median keys in tree
    8 Split A into values less than or equal to the median (0), and values above the median (1)
    9 For each possible value (0 or 1), vi, of A,
   10    Add a new tree branch below Root that corresponds to rows of data where A = vi
   11    Let Examples(vi) be the subset of examples that have the value vi for A
   12    Create a new key with the name corresponding to the side of the split (0=left, 1=right).  The value of this key should be an empty dictionary.
   13    Below this new branch, add the subtree id3(data[A==vi], target, columns, tree[split_side])
   14 Return Root
```

=== 7. Storing the Tree
```
# Create a dictionary to hold the tree
# It has to be outside of the function so we can access it later
tree = {}

# This list will let us number the nodes
# It has to be a list so we can access it inside the function
nodes = []

def id3(data, target, columns, tree):
    unique_targets = pandas.unique(data[target])

    # Assign the number key to the node dictionary
    nodes.append(len(nodes) + 1)
    tree["number"] = nodes[-1]

    if len(unique_targets) == 1:
        # Insert code here that assigns the "label" field to the node dictionary
        if 0 in unique_targets:
            tree["label"] = 0
        elif 1 in unique_targets:
            tree["label"] = 1
        return

    best_column = find_best_column(data, target, columns)
    column_median = data[best_column].median()

    # Insert code here that assigns the "column" and "median" fields to the node dictionary
    tree["column"] = best_column
    tree["median"] = column_median

    left_split = data[data[best_column] <= column_median]
    right_split = data[data[best_column] > column_median]
    split_dict = [["left", left_split], ["right", right_split]]

    for name, split in split_dict:
        tree[name] = {}
        id3(split, target, columns, tree[name])

# Call the function on our data to set the counters properly
id3(data, "high_income", ["age", "marital_status"], tree)
```
```
<tree>
{'column': 'age',
 'left': {'column': 'age',
  'left': {'column': 'age',
   'left': {'label': 0, 'number': 4},
   'median': 22.5,
   'number': 3,
   'right': {'label': 1, 'number': 5}},
  'median': 25.0,
  'number': 2,
  'right': {'label': 1, 'number': 6}},
 'median': 37.5,
 'number': 1,
 'right': {'column': 'age',
  'left': {'column': 'age',
   'left': {'label': 0, 'number': 9},
   'median': 47.5,
   'number': 8,
   'right': {'label': 1, 'number': 10}},
  'median': 55.0,
  'number': 7,
  'right': {'label': 0, 'number': 11}}}
```

=== 8. Printing Labels for a More Attractive Tree
* 위 트리사전은 모든 관련 정보를 보여주지만 보기엔 안좋다. 보기 위한 형식으로 수정
* 이를 위해 leaf 라벨을 보여줄 것임. 아래는 print 의사코드
```
def print_node(tree, depth):
    1 Check for the presence of the "label" key in the tree
    2     If found, print the label and return
    3 Print out the tree's "column" and "median" keys
    4 Iterate through the tree's "left" and "right" keys
    5     Recursively call print_node(tree[key], depth+1)
```
```
def print_with_depth(string, depth):
    # Add space before a string
    prefix = "    " * depth
    # Print a string, and indent it appropriately
    print("{0}{1}".format(prefix, string))


def print_node(tree, depth):
    # Check for the presence of "label" in the tree
    if "label" in tree:
        # If found, then this is a leaf, so print it and return
        print_with_depth("Leaf: Label {0}".format(tree["label"]), depth)
        # This is critical -- without it, you'll get infinite recursion
        return
    # Print information about what the node is splitting on
    print_with_depth("{0} > {1}".format(tree["column"], tree["median"]), depth)

    # Create a list of tree branches
    branches = [tree["left"], tree["right"]]

    # Insert code here to recursively call print_node on each branch
    print_node(tree["left"], depth+1)
    print_node(tree["right"], depth+1)
    # Don't forget to increment depth when you pass it in

print_node(tree, 0)
```
```
age > 37.5
    age > 25.0
        age > 22.5
            Leaf: Label 0
            Leaf: Label 1
        Leaf: Label 1
    age > 55.0
        age > 47.5
            Leaf: Label 0
            Leaf: Label 1
        Leaf: Label 0
```

=== 9. Making Predictions With the Printed Tree
* 위에서 프린트된 나무를 보고 새로운 가치를 예측할 수 없을까?
** 아래의 행을 예측해 본다고 가정
```
age    marital_status
50     1
```
** 먼저 37.5세 이상으로 나누고 오른쪽으로 감
** 그다음 나이 55 세 보다 작으므로 왼쪽, 그다음 47.5세 이상이므로 오른쪽
** 우리는 high_income 에 대해 1을 예측함
* 이런 작은 나무로 예측은 간단하지만 전체 소득 데이터셋으로 하려면?
** 눈으로 하기 힘든. 자동화된 방법이 필요

=== 10. Making Predictions Automatically



===

===
