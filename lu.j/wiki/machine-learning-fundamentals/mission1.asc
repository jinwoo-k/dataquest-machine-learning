= K-Nearest Neighbors 소개

== 1. 문제 정의
* AirBnB와 같은 주거공간 임대 시장에서 적정한 가격을 찾아주는 전략을 세움
** 우리와 유사한 몇가지 목록을 찾는다
** 유사한 몇개의 것들의 평균 가격대를 찾는다
** 계산된 평균가격대를 우리 가격에 설정한다

* 예측을 위해 기존 데이터에서 패턴을 찾아내는 프로세스 = 머신러닝
* 우리의 경우 지역 데이터를 이용해 최적의 가격을 예측할 것인데 그중 K-Nearest Neighbors 기술을 이용할 것임

== 2. 데이터 소개
* 우리가 사용할 데이터 = dc_airbnb.csv
** 예제 : 데이터를 읽어와 DataFrame 형태로 만들어줌

[source,python]
----
import pandas as pd
dc_listings = pd.read_csv("dc_airbnb.csv")
print(dc_listings)
----

== 3. K-Nearest Neighbors
==== 3.1 비교할 비슷한 목록들 중 하나의 숫자를 고름(K)
* 첨부된 이미지에서는 K = 3
==== 3.2 목록에서 가격이 책정되지 않은 목록과 얼마나 유사한지를 계산함
==== 3.3 유사한 목록들 중에 랭킹을 매긴 후 첫번째 K 수만큼 고름
* 여기서는 3개
==== 3.4 그 값들의 평균값을 내서 우리의 가격 리스트에 넣음

* 더 자세한 내용을 알려면 아래 두가지가 필요함
** 유사성 매트릭
** 어떻게 K 값을 고를 것인지

== 4. 유클리드 거리
* 가격과 같은 유사성을 측정하기 위해서는 유클리드 거리를 이용함
* https://s3.amazonaws.com/dq-content/euclidean_distance_five_features.png
* 하나의 feature를 가지고 계산하면 그것을 단변량 케이스라고 함
d = \sqrt{(q_1 - p_1)^2}

* 첫번째 생활공간과 우리사이의 유클리드 거리를 계산해보자. (조건 : 거실에 3명이 수용 가능해야함)

[source,python]
----
import numpy as np

our_acc_value = 3
first_living_space_value = dc_listings.iloc[0]['accommodates']
first_distance = np.abs(first_living_space_value - our_acc_value)
print(first_distance)
----

== 5. 모든 관측치의 거리계산
* 유클리드 거리 값이 0일 경우 가장 가까움
* 모든 생활공간에 대해 유클리드 거리를 계산 (조건 : 거실 수용 인원은 8명)
** https://s3.amazonaws.com/dq-content/distance_between_rows_and_ours.png

* 모든 생활공간에 대해 유클리드 거리를 계산하여 unique count 추출 (조건 : 거실 수용 인원은 3명)

[source,python]
----
our_acc_accommodates = 3
dc_listings['distance'] = dc_listings['accommodates'].apply(lambda x: np.abs(x - our_acc_accommodates))

print(dc_listings['distance'].value_counts())
----

== 6. 무작위 그리고 정렬
* 순서를 뒤섞은 후 다시 정렬하여 0~10까지 price를 뽑아냄

[source,python]
----
import numpy as np
np.random.seed(1)

dc_listings = dc_listings.loc[np.random.permutation(len(dc_listings))]
dc_listings = dc_listings.sort_values('distance')
print(dc_listings.iloc[0:10]['price'])
----
* 왜 랜덤 후 정렬 ?

== 7. 평균 가격
* 평균 가격을 구하기 전 문자열 제거 

[source,python]
----
stripped_commas = dc_listings['price'].str.replace(',', '')
dollars = stripped_commas.str.replace('$', '')
dc_listings['price'] = dollars.astype(float)
mean_price = dc_listings.iloc[0:5]['price'].mean()
----

== 8. 예측치를 만들기 위한 함수
* 수용인원을 넣으면 예측 가격을 리턴해주는 함수 정의 (k = 5)

[source,python]
----
dc_listings = pd.read_csv('dc_airbnb.csv')
stripped_commas = dc_listings['price'].str.replace(',', '')
stripped_dollars = stripped_commas.str.replace('$', '')
dc_listings['price'] = stripped_dollars.astype('float')
dc_listings = dc_listings.loc[np.random.permutation(len(dc_listings))]

def predict_price(new_listing):
    ## Complete the function.
    temp_df = dc_listings
    temp_df['distance'] = temp_df['accommodates'].apply(lambda x: np.abs(x - new_listing))
    temp_df = temp_df.sort_values('distance')
    nearest_neighbors = temp_df.iloc[0:5]['price']
    predicted_price = nearest_neighbors.mean()
    return(predicted_price)

acc_one = predict_price(1)
acc_two = predict_price(2)
acc_four = predict_price(4)
----

== 9. Next steps
