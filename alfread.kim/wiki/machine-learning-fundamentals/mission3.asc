== 1. 요점 되풀이하기
 * 정확성을 높이기 위해 모델을 조정할 수있는 두 가지 방법
   ** 가장 가까운 이웃을 순위 매길 때 모델이 유사성을 계산하는 데 사용하는 속성의 수를 늘린다. => 늘린다? 조정한다.
   ** k를 증가 시키면 예측을 계산할 때 모델이 사용하는 인근 이웃의 수를 늘린다 => 늘린다? 조정한다.
 * 거리 방정식에 맞지 않는 속성
   ** 비수치(유클리드 거리 방정식 사용 불가)
   ** 누락된 데이터
   ** 순서가 없는 값 ?? 
      => 수 개념에는 3가지 종류가 있다. 기수(갯수,크기,양),서수(순서),숫자기호(기호)
      => 우편번호는 숫자기호
      => 지리좌표는? 위도/경도는 적도 또는 그리니치 천문대를 기준으로 한 각도의 크기 개념 ( 일종의 기수 )
      
== 2. 속성제거 : 숫자가 아니거나 숫자이지만 수로서의 의미가 없는 속성은 제거.

== 3. 누락된 데이터 다루기
  * 먼저 속성값이 누락된 데이터가 너무 많은 속성은 제거한 후
  * 남은 속성에 대해서 누락된( NA : not applicable) 속성값을 가진 데이터 제거.
  
== 4. 열(컬럼) 표준화
  * 특정한 열이 거리에 큰 영향을 미치지 않도록 표준화가 필요 => 각 컬럼값들의 단위가 각각 다르기 때문
  * 정규화 방법 : 평균을 뺀 후 표준편차로 나눔 =>  평균 = 0, 표준편차 = 1 이 된다.
  
== 5. 다변수에 대한 유클리드 거리
.다변수 유클리드 거리.
image::https://s3.amazonaws.com/dq-content/distance_two_features.png[다변수 유클리드거리]
  * 참고 : https://en.wikipedia.org/wiki/Minkowski_distance[Minkowski Distance]

== 6.사이킷-런(라이브러리) 소개
  * 주요 기계 학습 알고리즘과 단순하고 통합 된 워크 플로우를 위한 기능을 포함
  * 네 단계의 주요 작업 흐름
    ** 1. 사용하기 원하는 머신러닝 모델을 인스턴스화 :  http://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsRegressor.html#sklearn.neighbors.KNeighborsRegressor[sklearn.neighbors.KNeighborsRegressor]
    ** 2. 모델을 학습데이터에 fitting
    ** 3. 모델을 예측에 사용
    ** 4. 예측의 정확도를 평가

== 7. 모델 피팅과 예측하기 (2,3 스텝)
 * fit 
   ** 훈련셋 피처와 훈련셋 타겟을 인자로 전달 => 타겟이란 예측하고자 하는 속성
   ** 누락값이나 비 수치형 데이터가 있으면 에러를 돌려줌
 * predict 
   ** 테스트셋의 피처를 인자로 전달
   
== 8. 사이킷-런을 이용하여 MSE 구하기
 * http://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_squared_error.html#sklearn.metrics.mean_squared_error[mean_squared_error]

== 9. 모든 속성 사용하기
[width="20%", options="header"]
|===
| feature(s) | MSE |	RMSE
| accommodates |	18646.5	 | 136.6
| bathrooms	| 17333.4	| 131.7
| accommodates, bathrooms	| 15660.4	| 125.1
| accommodates, bathrooms, bedrooms, number_of_reviews |	13320.2 |	115.4
|===

== 10. 다음 단계
 * 모델에서 사용할 피쳐를 선택하는 과정을 피쳐 선택이라고 한다.
 * 앞서 말한 예측의 정확도를 높이는 수단을 다시 바꿔서 말해야 함. 
   ** FROM : 가장 가까운 이웃을 순위 매길 때 모델이 유사성을 계산하는 데 사용하는 속성의 수를 늘립니다.
   ** TO : 가장 가까운 이웃을 순위 매길 때 모델이 유사성을 계산하는 데 사용하는 관련 속성을 선택.
 * 피쳐 선택에 따라 성능이 좌우될 수 있다.  
===
* 참고할 만한 문서
  ** http://proinlab.com/archives/2125[kNN (k-Nearest Neighbor) 알고리즘]
  ** https://www.youtube.com/watch?v=CyuI2F_wJWw
  
* 생각해 볼 거리
  ** K 값과 overfit/underfit 
  ** classification 에서 K값을 홀수로 쓰는 이유
