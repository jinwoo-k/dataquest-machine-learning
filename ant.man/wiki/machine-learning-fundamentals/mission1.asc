## introduction to k nearest neighbors

### step.1 Problem Definition
목표: 거주 공간으로 임대료 결정하기 (air bnb 사례)

. 최근접점을 몇개 쓸지 정한다. (답을 구하기 위해 홀수를 사용, 예: 2vs2 나오면 곤란)
. 자신의 값을 원점으로 하고 그린 원에 속한 것이 모가 많은가에 따라 정답을 구한다.
. 각 점과의 점수는 피타고라스 정의를 사용함.

### step.2 Introduction To The Data
air bnb test data : host_response_rate, ... city, price 등의 컬럼과 각 데이터가 있는 테이블 데이터

### step.3 K-Nearest Neighbors
1) 비슷한 리스트 찾기
2) 비슷한 리스트가 얼마나 가까운지 정하기
3) 각 리스트의 평균을 정한다.

image:https://s3.amazonaws.com/dq-content/knn_infographic.png[width="1000px"]

2개가 더 자세히 필요 : 1. 유사성 메트릭스 2. 어떻게 k 를 고르는가 (k:이웃갯수)


### step.4 Euclidean Distance (유클리안 거리)

Euclidean distance : n차원 공간에서 두 점간 거리를 알아내는 공식

d = \sqrt{(q_1-p_1)^2 + (q_2-p_2)^2 + \cdots + (q_n-p_n)^2}


### step.5 Calculate Distance For All Observations
Euclidean distance 에서 두 점에서 한 점을 전체합으로 고정하고 계산

### step.6 Randomizing, And Sorting
랜덤으로 섞은 뒤 sorting -> 현실세계처럼 뒤섞인 데이터를 계산된 컬럼 (Euclidean distance) 으로 정렬함

=> 가까운 이웃을 구하기 위해 정렬

### step.7 Average Price
가까운 이웃을 구하기 전 평균 가격 값 (목표값) 구하기

### step.8 Function To Make Predictions
각 row 별로 평균 값 차이 값으로 계산한다.

### step.9
모델의 성능 확인

아래는 이 미션에서 진행된 소스
[source,python]
----
import numpy as np
import pandas as pd

dc_listings = pd.read_csv("dc_airbnb.csv")
stripped_commas = dc_listings['price'].str.replace(',', '')
stripped_dollars = stripped_commas.str.replace('$', '')
dc_listings['price'] = stripped_dollars.astype('float')
dc_listings = dc_listings.loc[np.random.permutation(len(dc_listings))]

def predict_price(new_listing):
    temp_df = dc_listings
    temp_df['distance'] = temp_df['accommodates'].apply(lambda x: np.abs(x - new_listing))
#    temp_df = dc_listings[dc_listings["accommodates"] == new_listing]
    temp_df = temp_df.sort_values('distance')
    predicted_price = temp_df.iloc[0:5]['price'].mean()
    return(predicted_price)

acc_one = predict_price(1)
acc_two = predict_price(2)
acc_four = predict_price(4)

print(acc_one)
print(acc_two)
print(acc_four)
----

## 참고 자료들

. python ref : https://datascienceschool.net/view-notebook/661128713b654edc928ecb455a826b1d/

. dataframe ref : https://pandas.pydata.org/pandas-docs/stable/api.html#dataframe
.. http://pandas.pydata.org/pandas-docs/version/0.17.0/generated/pandas.DataFrame.iloc.html

. youtube ref : https://www.youtube.com/watch?v=CyuI2F_wJWw
