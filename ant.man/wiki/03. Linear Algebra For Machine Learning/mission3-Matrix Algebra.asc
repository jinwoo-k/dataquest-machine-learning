== Matrix Algebra
=== step.1 Basic Matrix Operations (기본 행렬 연산)
* 벡터처럼 행렬도 그들만의 고유 대수 연산이 있음. 우선 더하기 빼기부터 시작
* 이전 미션에서 보았듯 행렬은 하나 이상의 열벡터로 구성됨
* 이 때문에 벡터의 연산도 행렬도 이뤄짐. 동일 수의 행가진 벡터끼리 덧셈/뺄셈 가능 => 동일 수의 행,열을 가진 행렬이 덧심/뺄셈 가능

image:./images/matrix_vector_decomposition.png[]

=== step.2 Matrix Vector Multiplication
* 행렬과 벡터의 곱: 행렬의 각 행을 열 벡터와 결합

image:./images/matrix_vector_multiplication.png[]

```
import numpy as np
import matplotlib.pyplot as plt

matrix_a = np.asarray([
    [0.7, 3, 9],
    [1.7, 2, 9],
    [0.7, 9, 2]
], dtype=np.float32)

vector_b = np.asarray([
    [1],
    [2],
    [1]
], dtype=np.float32)

ab_product = np.dot(matrix_a, vector_b)

print(ab_product)
```
=== step.3 Matrix Multiplication
* 행렬은 열 벡터로 구성. 행렬 벡터 곱셈에서 배운 내용을 통해 행렬을 곱할 수 있음
* 행렬 벡터 곱에서, 각 행렬의 행과 열 벡터 사이에 내적 (dot product)을 함
* 행렬의 곱에서는 첫 행렬의 행과 두번째 행렬의 각 행 사이에 내적을 하기위해 이를 확장함

image:./images/matrix_multiplication.png[]

* 행렬 벡터 곱셈과 같이, 첫 행렬의 열의 수와 두번째 행렬의 행 수가 같아야함.

image:./images/valid_matrix_multiplication.png[]

* 또한, 곱의 순서는 중요하다. (AB 와 BA 는 완전 다르다)

=== step.4 Matrix Transpose (전치 행렬)

* 행렬의 전치(transpose): 행렬의 행과 열을 바꿈 (rotate 회전과 같다.)
* 종종 다른 차원의 테이블을 사용하는데, 이럴때 행렬곱을 위해 transpose (전치)를 수행 (기본적으론 행과 열이 같으면 전치가 불필요)

image:./images/Matrix_transpose.gif[]

image:./images/matrix_transpose_1.png[]
image:./images/matrix_transpose_2.png[]

전치행렬 성질 참고
ref: https://ko.wikipedia.org/wiki/%EC%A0%84%EC%B9%98%ED%96%89%EB%A0%AC

```
transpose_a = np.transpose(matrix_a)
```

=== step.5 Identity Matrix (단위 행렬)
* 대각선은 모두 1을 가지고 나머지는 0 (정사각행렬)
* 단위행렬은 곱셈의 항등원
* Ax = b 에서 A를 변환하여 단위행렬로 만들어서 x벡터를 구할 수 있다.

image:./images/Identity_Matrix.png[]

image:./images/identity_matrix_multiple.png[width="700px"]

ref : https://ko.wikipedia.org/wiki/%EB%8B%A8%EC%9C%84%ED%96%89%EB%A0%AC

```
# 2 x 2 identity matrix
i_2 = np.identity(2)
```
=== step.6 Matrix Inverse (역행렬)
* Ax = b 에서 A 를 없애는 방법. 즉, A 를 항등행렬로 변환 => 역행렬을 곱하면 됨

image:./images/Matrix_Inverse.png[width="300px"]
image:./images/matrix_inverse_multiple.png[]
image:./images/matrix_inverse_multiple_result.png[]

* 곱셈과 역행렬과 비슷하지만 계산은 완전 다름
image:./images/origin_matrix.png[]
image:./images/inverse_matrix.png[]

* "ad-bc" 는 결정자 (determinant)
* 2x2 행렬의 경우, ad-bc 가 0 이 아닐때만 역변환이 가능

image:./images/determinant1.png[width="200"]
image:./images/determinant2.png[width="200"]

=== step.7 Solving The Matrix Equation
image:./images/solving_matrix1.png[]
image:./images/solving_matrix2.png[]
image:./images/solving_matrix3.png[]

```
from numpy.linalg import inv
# compute inverse of matrix_a
inv(matrix_a)
```

=== step.8 Determinant For Higher Dimensions
* 같은 열과 행으로 된 행렬 (정사각행렬) + determinant (결정자) 가 0 이 아니여야 함
* 아래는 일반적인 결정자 (determinant)

image:./images/3d_determinant_one.png[]
* 높은 차원의 결정자 만드는 방법
** 행이나 열을 선택 (대부분 교재에선 첫번째 행 선택)
** 해당 행의  첫번째 값에 대해 행의 두번째및 세번째 값과 해당 열의 있는 값의 나머지로 작은 행렬로 함
** 스칼라 곱 : 위의 작은 행렬의 결정자
** 위 연산 반복

image:./images/3d_determinant_two.png[]
image:./images/3d_determinant_three.png[]

** 위 그림에서 det() 를 각 행렬에서 추가해야 함

```
# numpy 에서 한번에 계산해줌
det_22 = numpy.linalg.det(matrix_22)
```

=== step.9 Matrix Inverse For Higher Dimensions

=== step.10 Next Steps

잘못된 연산이므로, 제대로된 ref 확인
http://elwlsek.tistory.com/216
http://darkpgmr.tistory.com/104
https://ko.wikipedia.org/wiki/%EA%B0%80%EC%97%AD%ED%96%89%EB%A0%AC
http://twlab.tistory.com/43
