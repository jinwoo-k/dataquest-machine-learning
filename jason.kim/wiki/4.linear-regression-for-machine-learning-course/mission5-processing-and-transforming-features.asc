= Processing And Transforming Features
Learn how to clean and prepare features for linear regression.

== 1. Introduction
* 피쳐 엔지니어링
  ** 새로운 피쳐를 처리하고 만드는 과정
  ** 특정 도메인에 대한 지식이 도움이 됨
* 이번 미션의 전반부에서는 값 누락외의 문제에 대해 다룬다.
  ** 숫자형 컬럼이 아닌 경우
  ** 숫자형 컬럼이나 순서가 없는 값인 경우(zip 코드)
  ** 숫자형 컬럼이나 타겟 컬럼과 연관이 업는 경우 (year)
* 이번 미션의 후반부에서는 값 누락에 대해 처리를 다룬다.

[source,python]
----
import pandas as pd

data = pd.read_csv('AmesHousing.txt', delimiter="\t")
train = data[0:1460]
test = data[1460:]

train_null_counts = train.isnull().sum()
print(train_null_counts)

df_no_mv = train[train_null_counts[train_null_counts == 0].index]
----

== 2. Categorical Features
* 범주형 피쳐
  ** 특정 컬럼의 값이 제한된 수(limited)의 문자열로 구성된 경우
  ** pandas의 pandas.Series.astype() 메소드를 사용하여 범주 형으로 변환 (누락된 값이 없어야함)
[source,python]
----
text_cols = df_no_mv.select_dtypes(include=['object']).columns

for col in text_cols:
    print(col+":", len(train[col].unique()))
    train[col] = train[col].astype('category')

print(train['Utilities'].cat.codes.value_counts())
----

== 3. Dummy Coding
* 범주형 데이터로 변환 시 pandas 는 각 값에 대해 0에서 n-1까지의 숫자 (여기서 n은 열의 고유 값 수)를 지정한다.
  ** 이는 피쳐가 타겟과 선형으로 상관관계를 갖는다는 가정을 위반한다.
  ** 더미 코딩을 이용해 이를 해결한다.
* 더미 코딩
  ** n 개의 정수 코드를 가진 단일 열 대신에 n 개의 이진 열을 생성한다.
  ** pandas.get_dummies() 를 이용해 생성할 수 있다.
  ** image:./images/m5_3_1.png[, 450]

[source,python]
----
dummy_cols = pd.DataFrame()

for col in text_cols:
    dummy = pd.get_dummies(train[col])
    train = pd.concat([train, dummy], axis=1)
    del train[col]

print(train.head())
----

== 4. Transforming Improper Numerical Features
* 숫자값을 갖지만 타겟과 선형 관계를 갖지 않는 컬럼도 있다. ('Year Remod/Add', 'Year Built')
  ** 하지만 이 두 데이터의 차이는 타겟과 선형 관계를 가질 수 있다.

[source,python]
----
train['years_until_remod'] = train['Year Remod/Add'] - train['Year Built']
print(train.head())
----

== 5. Missing Values
* 누락된 값을 처리하는 두가지 방법
  ** 누락된 값이 포함된 행을 제거
    *** 장점 : 모델링을 위해 깨끗한 데이터만 남는다.
    *** 단점 : 데이터 수를 줄인다. (예측정확도가 낮아질 수 있다.)
  ** 통계치로 대체(imputation or replace)한다.
    *** 장점 : 해당 열의 나머지 컬럼에 대해서는 활용할 수 있다.
    *** 단점 : 모델 학습에 노이즈로 작용한다.
* 누락된 값을 채우기 위한 최소한의 데이터 수치는 없으며, 많은 사람이 50% 이상인 경우 대체를 이용한다.

[source,python]
----
import pandas as pd

data = pd.read_csv('AmesHousing.txt', delimiter="\t")
train = data[0:1460]
test = data[1460:]

train_null_counts = train.isnull().sum()

df_missing_values = train[train_null_counts[(train_null_counts>0) & (train_null_counts<584)].index]

print(df_missing_values.isnull().sum())
print(df_missing_values.dtypes)
----

== 6. Imputing Missing Values
* 누락된 값이 있는 컬럼이 수치형 데이터인 경우 각 열의 평균, 중앙값 또는 최빈값으로 채워넣을 수 있다.
* pandas 에서는 pandas.DataFrame.fillna() 메서드를 이용해 누락값을 채운다.
[source, python]
----
float_cols = df_missing_values.select_dtypes(include=['float'])
float_cols = float_cols.fillna(df_missing_values.mean())
print(float_cols.isnull().sum())
----
