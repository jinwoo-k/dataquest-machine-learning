= Processing And Transforming Features

== 1. Introduction
* 선형회귀가 작동하는 방식을 이해하기 위해 누락된 값이 없고 편리한 숫자 표현으로 된 데이터셋을 이용하도록 함
* 이 미션에서는 모델의 일부를 모델에서 사용하기 위해 변환하는 방법에 대해 살펴봄
* 새 피쳐를 처리하고 만드는 프로세스를 피쳐 엔지니어링이라고 함
* 누락된 값이 없는 열 중에서 일반적인 문제는 다음과 같다.
** 열이 숫자가 아님
** 열은 숫자인데 서수가 아님
** 열은 숫자이지만 대상 열과 관계 유형을 나타내진 않음

== 2. Categorical Features
* 데이터 프레임 df_no_mv의 일부 열에는 문자열이 포함되어 있음
* 이 열에 제한된 값이 포함되어 있으면 이를 범주적 피쳐라고 한다.
* 범주형 피쳐는 특정 교육셋을 특정 범주로 그룹화 한다.

[source,python]
----
>>> train['Utilities'].value_counts()
AllPub    1457
NoSewr       2
NoSeWa       1
Name: Utilities, dtype: int64
​
>>> train['Street'].value_counts()
Pave    1455
Grvl       5
​
>>> train['House Style'].value_counts()
1Story    743
2Story    440
1.5Fin    160
SLvl       60
SFoyer     35
2.5Unf     11
1.5Unf      8
2.5Fin      3
----

* pandas의 범주형으로 만드는 기능을 이용
* .cat 접근자를 이용하고 .codes 속성을 사용해서 열의 기본숫자 표현에 접근한다.
* >>> train['Utilities'].cat.codes

[source,python]
----
>>> train['Utilities'] = train['Utilities'].astype('category')
----

== 3. Dummy Coding
* 열을 범주 데이터 형식으로 변환할때 pandas는 각 값에 대해 0~(n-1)까지 숫자를 지정함
* 이 접근법의 단점은 선형회귀의 가정 중 하나를 위반한다.
* 선형회귀는 피쳐가 대상 열과 선형으로 상관된다는 가정하에 동작하는데 범주적 피쳐의 경우 해당 열에 할당한 범주코드에는 실제 의미가 없다.
* 이 문제의 일반적인 해결책은 Dummy Coding이라는 기술을 이용하는것
* n개의 정수코드를 가진 단일 열 대신에 n개의 이진열이 있다. 다음은 유틸리티 열이다.

image::./images/5-1.PNG

* 처음 4개 행의 원래 값은 AllPub였기 때문에 새 체계에서 Utilities_AllPub 열에 true(1), 다른 두 열에 0을 포함
* Pandas는 get_dummies() 라는 텍스트 열을 모두 변환시킬수 있는 편리한 메소드를 제공함

== 4. Transforming Improper Numerical Features
* 데이터 세트의 수치 열 중 일부는 범주 형이며 제한된 고유 값의 집합만 있음
* 해당 범주에 사용된 숫자가 숫자적인 의미가 없다면 피쳐 변환 과정은 동일하다.
* 범주적이지 않지만 수치적 표현을 개선해야하는 수치적 특징을 알아봄
* Year Remod/Add, Year Built
** Year은 집이 얼마나 오래되었는지를 나타내지 않음
** Year remod/Add 열은 실제 선형회귀 모델에 유용한 정보를 제공하지 않음

== 5. Missing Value
* 열에 값이 없는 경우 우리가 취할수 있는 두가지 주요 접근법이 있음
** 특정 열에 누락된 값이 포함된 행 제거
*** 장점 : 누락된 값이 포함된 행이 제거되어 모델링을 위한 깨끗한 데이터만 남음
*** 단점 : 훈련세트의 전체 관찰 결과가 제거되어 전반적인 예측 정확도가 떨어질 수 있음
** 열의 서술 통계를 사용하여 빠진 값을 대체한다.
*** 장점 : 누락된 값은 모델의 나머지 관찰을 보존하면서 잠재적으로 유사한 추정으로 대체된다.
*** 단점 : 접근방식에 따라 모델에 대한 잡음이 많은 데이터를 추가하여 학습할 수 있다.


== 6. Imputing Missing Values
* df_missing_values의 열의 절반정도가 문자열이고 약 절반이 float값 처럼 보인다.
* 누락된 값을 모두 해당값으로 변경하는 작업을 진행
* pandas.DataFrame.fillna()라는 메소드를 이용해 값을 전달하면 모든 누락값이(NaN)이 전달된 값으로 대체됨


== 예제 모음

=== 1.

[source,python]
----
import pandas as pd

data = pd.read_csv('AmesHousing.txt', delimiter="\t")
train = data[0:1460]
test = data[1460:]

train_null_counts = train.isnull().sum()
print(train_null_counts)
df_no_mv = train[train_null_counts[train_null_counts==0].index]
----

== 2.

[source,python]
----
text_cols = df_no_mv.select_dtypes(include=['object']).columns

for col in text_cols:
    print(col+":", len(train[col].unique()))
for col in text_cols:
    train[col] = train[col].astype('category')
train['Utilities'].cat.codes.value_counts()
----

== 3.

[source,python]
----
dummy_cols = pd.DataFrame()
for col in text_cols:
    col_dummies = pd.get_dummies(train[col])
    train = pd.concat([train, col_dummies], axis=1)
    del train[col]
----

== 4.

[source,python]
----
train['years_until_remod'] = train['Year Remod/Add'] - train['Year Built']
----

== 5.

[source,python]
----
import pandas as pd

data = pd.read_csv('AmesHousing.txt', delimiter="\t")
train = data[0:1460]
test = data[1460:]

train_null_counts = train.isnull().sum()
df_missing_values = train[train_null_counts[(train_null_counts>0) & (train_null_counts<584)].index]

print(df_missing_values.isnull().sum())
print(df_missing_values.dtypes)
----


== 6.

[source,python]
----
float_cols = df_missing_values.select_dtypes(include=['float'])
float_cols = float_cols.fillna(df_missing_values.mean())
print(float_cols.isnull().sum())
----
