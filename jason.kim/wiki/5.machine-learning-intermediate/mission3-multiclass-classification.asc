= Multiclass Classification
Learn how to use logistic regression with multiple categories.

== 1. Introduction to the data
* 자동차에 대한 정보를 이용해 자동차의 생산지를 북미, 유럽, 아시아 로 구분한다.
  ** 데이터 구성 요소 : 갤런당 마일, 실린더수(기통), 배기량, 마력, 중량, 가속력, 출시연도, 생산지(1: 북미, 2: 유럽, 3: 아시아), 자동차 명

[source,python]
----
import pandas as pd
cars = pd.read_csv("auto.csv")

unique_regions = cars.origin.unique()
print(unique_regions)
print(cars.origin.value_counts())
print(cars.head())
----

== 2. Dummy variables
* 이 피쳐들 중 범주형 데이터는 실린더, 출시연도, 생산지 이다. 이 중 실린더와 출시연도는 생산지 예측에 사용할 수 있도록 숫자값으로 변환 (더미코딩)
[source,python]
----
dummy_cylinders = pd.get_dummies(cars["cylinders"], prefix="cyl")
cars = pd.concat([cars, dummy_cylinders], axis=1)

dummy_years = pd.get_dummies(cars["year"], prefix="year")
cars = pd.concat([cars, dummy_years], axis=1)

cars = cars.drop(['year', 'cylinders'], axis=1)
print(cars.head(5))
----

== 3. Multiclass classification
* 2개 이내의 카테고리 분류 - 바이너리 분류, 3개 이상의 카테고리 분류 - 멀티클래스 분류
* 멀티클래스 분류를 수행하는 여러 방법 중 one-versus-all 에 대해 학습함.
* one-versus-all
  ** 하나의 카테고리를 Positive 케이스로 선택하고 나머지 카테고리를 False 케이스로 그룹화하는 기법
  ** 해당 문제를 여러가지 이진 분류 문제로 분리
  ** 관찰에 대해 모델은 각 카테고리에 속할 확률 출력

[source,python]
----
shuffled_rows = np.random.permutation(cars.index)
shuffled_cars = cars.iloc[shuffled_rows]

train_count = int(len(shuffled_cars) * 0.7)

train = shuffled_cars[:train_count]
test = shuffled_cars[train_count:]
----

== 4. Training a multiclass logistic regression model
* 자동차 생산지 분류 문제를 one-versus-all 로 해결시 필요한 세개의 모델은 다음과 같다.
  ** 북미에서 생산된 차량은 Positive(1)로, 그외에는 Negative(0) 으로 하는 모델
  ** 유럽에서 생산된 차량은 Positive(1)로, 그외에는 Negative(0) 으로 하는 모델
  ** 아시아에서 생산된 차량은 Positive(1)로, 그외에는 Negative(0) 으로 하는 모델
* 위의 각각 모델은 이진 분류 모델이며, 결과는 확률값으로 나온다. 각각의 열에 대해 가장 높은 확률을 갖는 생산지를 채택한다.

[source,python]
----
from sklearn.linear_model import LogisticRegression

unique_origins = cars["origin"].unique()
unique_origins.sort()

models = {}

columns = ['cyl_3', 'cyl_4', 'cyl_5', 'cyl_6', 'cyl_8', 'year_70', 'year_71', 'year_72', 'year_73', 'year_74', 'year_75', 'year_76', 'year_77', 'year_78', 'year_79', 'year_80', 'year_81', 'year_82']

for origin in unique_origins:
    logistic_model = LogisticRegression()
    logistic_model.fit(cars[columns], cars["origin"] == origin)
    models[origin] = logistic_model

print(models)
----

== 5. Testing the models
[source,python]
----
testing_probs = pd.DataFrame(columns=unique_origins)

columns = ['cyl_3', 'cyl_4', 'cyl_5', 'cyl_6', 'cyl_8', 'year_70', 'year_71', 'year_72', 'year_73', 'year_74', 'year_75', 'year_76', 'year_77', 'year_78', 'year_79', 'year_80', 'year_81', 'year_82']

for origin in unique_origins:
    testing_probs[origin] = models[origin].predict_proba(test[columns])[:, 1]

print(testing_probs)
----

== 6. Choose the origin
* 확률이 가장 높은 값을 생산지로 추정한다.
[source,python]
----
predicted_origins = testing_probs.idxmax(axis=1)
print(predicted_origins)
----
