= Linear Systems
Learn how to use matrices to solve systems of linear functions.



== 1. Overview Of Linear Algebra
* 이전장에서 미적분학의 구조를 탐구하고 아래와 같은 부분야 사용했다.
1. 선형함수의 기울기 이해
2. 비선형 함수의 미분 (함수로서의 기울기) 이해
3. 비선형 함수에서 극한값 찾기
* 이번 과정에서는 선형 대수학을 배우기 전 선형 함수(linear function = 선형 방정식(linear equation))를 이해하는데 초점을 둠
* 최적 급여 문제를 예로 다룸

* 주당 1000불 + 시간당 30불을 받는 직업과 주당 100불 + 시간당 50불을 받는 직업을 주당 받는 급여의 방적식으로 나타내면 다음과 같다.
* y = 1000 + 30x , y = 100 + 50x
1. 두개의 직업의 급여가 같아지는 시간은? => 연립방정식을 이용해 풀면 됨
2. 두번째 직업이 첫번째 직업보다 돈을 많이 벌기 시작하는 시간은? => 1번에서의 시간보다 큰 시간을 일하면 됨

* 실습 : numpy.linspace 를 이용해 x를 변화해가며 y의 변화량을 표현해봄
[source,python]
----
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 50, 1000)
y1 = 30 * x + 1000
y2 = 50 * x + 100

plt.plot(x, y1, 'orange', x, y2, 'b')
plt.show()
----

== 2. Solving Linear Systems By Elimination
* 이전 장의 예에서 해는 두개의 선이 교차하는 지점인 x = 45이다.
* 이를 손으로 푸는 방법에 대해 설명 (한쪽 방정식의 y를 다른방정식으로 대체해 x값을 구하는 방법)
* 이 방법은 변수가 두개이기 때문에 손으로 풀이가 가능하지만, 변수가 여러개가 된다면 이 방법으로 풀기 힘들다. -> 가우스 소거법 이용

== 3. Representing Functions In General Form
* 기존에는 기울기 중심 형태(y = mx + b)를 이용했지만 선형대수에서는 일반 폼(ax + by = c)를 이용한다.
* 앞의 예의 일반폼은 다음과 같다. 30x − y = −1000   ,   50x − y = −100
* 이를 첨가행렬(augmented matrix)로 표현하면 다음과 같다.

image::./images/m1_3_1.png[]
image::./images/m1_3_2.png[]

== 4. Representing An Augmented Matrix In NumPy
* numpy 에서 첨가행렬을 표현하기 위해서는 numpy.asarray() 를 이용한다.
[source,python]
----
matrix_one = np.asarray([
    [30, -1, -1000],
    [50, -1, -100]
], dtype=np.float32)
----

== 5. Matrix Representation Of The Solution
* 이렇게 표현된 방정식을 풀기 위해서는 메트릭스를 아래와 같은 포맷으로 변환해야한다.

image::./images/m1_5_1.png[]

== 6. Row Operations
* 선형 시스템의 유지를 위해서는 아래와 같이 세개의 행연산만 가능하다.

image::./images/m1_6_1.png[]

[source,python]
----
matrix_one = np.asarray([
    [30, -1, -500],
    [50, -1, -100]
], dtype=np.float32)

matrix_one[0] = matrix_one[0] / 30
----

* numpy 를 이용해 이런 연산을 사용하는 법에 대해 배운다.

== 7. Simplifying Matrix To Echelon Form
* 행열의 기본연산을 이용해 사다리꼴을 만드는 과정이 행렬의 해를 구하는 과정이다.
* 첫번째 단계는 첫번째 행을 특정 갑으로 나눠 첫번째 열의 값을 1로 만드는것이다.
* 다음으로 첫번째 행에 특정값을 곱해 두번째 행에 더해, 두번째 행의 첫번째 열의 값을 0으로 만든다.

== 8. Row Reduced Echelon Form
* 스탭7에서 이어 row reduce 를 통해 기약사다리꼴행렬을 만든다.

[source,python]
----
matrix_three = np.asarray([
    [1, -1/30, -1000/30],
    [0, 1, 2350]
], dtype=np.float32)

matrix_three[0] = matrix_three[0] + (matrix_three[1] / 30)
print(matrix_three)
----

== 9 Next Steps
* 대부분의 실제 상황에서 종속 변수 y는 하나의 x가 아닌 여러 개의 독립 변수에 연결된다. 이러한 함수를 나타 내기 위해 다음과 같은 일반 형식의 다른 버전을 사용해야 한다.
* 3개 이상 변수가 있는 상황에서는 가우스 소거법을 이용하는게 힘들다. 이에 다음 미션에서는 선형대수를 이용한 이론과 기하학적 방법을 이용해 고차원 선형 시스템을 해결하는 법을 배울 것이다.
