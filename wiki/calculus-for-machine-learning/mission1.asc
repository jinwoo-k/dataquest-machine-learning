== Understanding Linear And Nonlinear Functions
=== 1. Why Learn Calculus? (왜 미적분을 배워야하는가?)

* 데이터에 의존적인 KNN 모델로는 쉬운 개념이나, 계산집약적이기 때문에 많은 데이터에 적용하기 어려우며 비효율적임
** 알고리즘의 동작을 이해하는데 수학을 필요로 하지 않음
** 이해하기 쉽지만 큰 데이터 세트에는 사용할 수 없다,
** 계산 집약적 인 기술임
* 다음에 배울 수 있는 대부분의 기계 학습 기술에 대해 모델은 수학 함수로 표현
* 미적분
** 다양한 지점에서의 가파름을 확인 이해
** 함수의 극한점을 찾기
** 데이터 셋을 최적으로 나타내는 함수를 결정

수학 함수로 타겟 attribute와 feature 의 관계를 발견할 예정
(아래와 같이 )
image:./images/ml_math_function.png[width="500px"]

```
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 3, 301)
y = -(x ** 2) + 3 * x - 1
plt.plot(x, y)
```
=== 2. Linear Function
```
y = mx + b ( m과 b: 상수, x과 y: 변수)
```
m: 기울기 , b: y축 , (m이 step을 결정, m 이 0 이면 모든 값이 b)

<m, b 의 변화에 따라 그래프의 변화>

* m을 고정하고 b를 변화 시키면 선은 어떻게 바뀌나요?
** 직선의 기울기의 변화없이 y축을 따라 이동

* b는 고정되어 있지만 m이 다를 때 줄이 어떻게 바뀌나요?
** y축과 직선이 만나는 점( y 절편) 을 중심으로 기울기가 변함

* 어떤 값이 라인의 기울기를 제어합니까?
** m의 값에 따라 기울기가 변하게 됨

* m이 0으로 설정되면 라인은 어떻게됩니까?
** x축과 평행한 직선, y값은 b 로 일정 (y= b)

=== 3. Slope And Y-Intercept (기울기와 Y절편)
m : slope (기울기), b : y-intercept (y 절편)

image:./images/slope_screenshots.png[width="1000px"]
image:./images/slope_eq.png[width="300px"]

* b는 직선의 y-절편 (y축과 직선이 만나는 점의 y좌표값)
* m = 0 and b = 0 이면 해당 직선은 x축을 나타냄

<참고>

* x 절편 : 직선이 x축과 만나는 점의 x 좌표
** y = mx + b 라는 직선과 x = 0 이라는 직선(x축) 의 연립방정식의 해의 x 값
** y= mx + b 에서 x축의 모든점의 y좌표는 0이므로 y=0 을 직선함수에 대입하면 0 = mx + b . 여기서 식을 x에 대해 정리하면 x = b / m
** m <> 0 이면 항상 x절편은 b/m
** m = 0 일 때 x 절편은 없거나 무한하게 많을 수 있다.
** m=0 이고 b = 0 일 때 직선은 x축과 일치하고 절편은 무한히 많으므로 정할 수 없음 (부정)
** m=0 이고 b <> 0 일 때 직선은 x축과 평행하고 존재하지 않음 (불능)

* y 절편 : 직선이 y축과 만나는 점의 y 좌표
** y = mx + b 라는 직선과 y=0 이라는 직선(y축)의 연립방적식의 해의 y 값
** y= mx +b 에서 y축상의 모든 점의 x 좌표는 0 이므로 x=0 을 직선함수에 대입하면 y = b
** y 절편 값은 항상 존재하는가? ⇒ NO!!!
** y축과 평행한 직선은 y절편이 존재하지 않음
** y = mx + b 형식으로는 표현이 불가 (x = 3)

* 좀 더 일반적인 직선의 형태는 ax + by + c = 0 의 형태임.

=== 4. Math behind Slope
* 한 라인의 어떤 점의 변화량은 기울기이다. (일정한 값을 가짐)
```
m = (y1-y2) / (x1-y2)
```

<참고>

* 만일 x1 == x2 이면 m은 구할 수 없음 : 직선은 y축과 평행한 직선으로 x = x1으로 표현
* y절편인 b 값을 마저 구해보면 식1 y1 = mx1 + b 에서 b에 대하여 정리하면 b = y1 - m*x1
* y절편을 구할 때 식2을 사용해도 마찬가지임. y2 = mx2 + b를 b에 대해 정리하면 b = y2 - m*x2

=== 5. 비선형 함수
* nonlinear function: 뻗지 않고 커브가 있음, x 의 증가량과 y 증가량이 비례하지 않음
* 관계가 비선형이라면, 우리는 2 점을 샘플링하고 그 사이의 기울기를 사용하여 예측할 수 없다.

=== 6. Secant Lines
* 선형 관계면 기울기를 알기 때문에 어느 점이든 알 수 있음 (반대로 비선형이면 예측 불가)

* secant line (분할 선?) : 곡선의 두 점을 교차하는 선

-> (3,5)(3,10)(3,15)
 예제를 보아 기울기가 점차 낮아지고 있음 (음수로 커짐)

image:./images/Secant.png

=== 7. Secant Lines And Slope
* 이전 step 을 보아 x1을 고정으로 다음 x2를 멀리 할수록 곡선과 멀어짐

=> 차이가 작을 수록 곡선의 해당점의 기울기와 가까움 (하지만 완전 같으면 기울기가 없음)

=== 8. Target Line
* x1, x2가 같으면 0으로 나누는 것이기 때문에 기울기가 undefined 이다.
* 비선형 함수의 경우 순간 변화율로 기울기를 나타냄.
* Tangent Line (접선) : 함수의 한점만 지나는 선


=== 주요함수 활용 팁

* 라이브러리 사용 선언
** import pandas as pd
** import numpy as np
** import matplotlib.pyplot as plt
** import seaborn
*** Seaborn은 matplotlib을 기반으로 다양한 색상 테마와 통계용 챠트 등의 기능을 추가한 시각화 패키지
*** matplotlib 패키지에 의존하며 통계 기능의 경우에는 statsmodels 패키지에 의존
*** 참고 : http://stanford.edu/~mwaskom/software/seaborn/index.html

* function
** np.linspace : 시작점과 끝점 사이에 균등하게 정해진 값들을 생성해 줌
** plot 함수 예제
*** plt.plot(x,y)
*** plt.plot(x, x*m + b, c='green') : m, b 는 상수
** seaborn.set(style='darkgrid')
