= Processing And Transforming Features

== 1. Introduction
    * feature engineering : 속성들을 처리하고 새로 생성하는 프로세스
        ** 특정 도메인에 대한 지식이 도움이 됨
        ** 이 미션에서는 도메인 독립적인 전략에 중점을 둠

== 2. Categorical Features
    * 범주형 속성 : 속성이 제한된 값들의 집합에 포함

image:./images/m5-1.png[]

    * 모델에서 이러한 속성을 사용하려면  수치로 변환 해야 함.
        ** pandas는 라이브러리가 특별한 범주 형 데이터 유형을 가지고 있다.
            *** https://pandas.pydata.org/pandas-docs/stable/categorical.html[Categorical Data]
        ** pandas.Series.astype () 메소드를 사용
          *** 누락 된 값이 없는 열을 범주 형으로 변환.
          *** .cat 접근자를 사용하고 .codes 속성을 사용하여 실제로 열의 기본 숫자 표현에 액세스.

image:./images/m5-2.png[]

image:./images/m5-3.png[]

image:./images/m5-4.png[]

```
train['Utilities'].value_counts()
```
[width="50%"]
|=======
|AllPub  |  1457
|NoSewr   |    2
|NoSeWa   |    1
|=======

 Name: Utilities, dtype: int64

```
train['Utilities'].cat.codes.value_counts()
```
[width="50%"]
|=======
|0  |  1457
|2  |     2
|1  |    1
|=======
dtype: int64

```
train['Utilities'].cat.categories
```

```
train['Utilities'] = train['Utilities'].cat.set_categories(['AllPub', 'NoSeWa', 'NoSewr'],ordered=True)
```



== 3. Dummy Coding
* 범주형 데이터로 변환 시 pandas 는 각 값에 대해 0에서 n-1까지의 숫자를 지정한다.
  ** 이는 피쳐가 타겟과 선형으로 상관관계를 갖는다는 가정을 위반.
  ** 더미 코딩을 이용해 이를 해결
* 더미 코딩 : n 개의 정수 코드를 가진 단일 열 대신에 n 개의 이진 열을 생성
  ** pandas.get_dummies() 를 이용해 생성할 수 있다.

image:./images/m5-5.png[]

== 4. Transforming Improper Numerical Features
     * 숫자값을 갖지만 타겟과 선형 관계를 갖지 않는 컬럼도 있다.
       ** ex : 'Year Remod/Add', 'Year Built'
       ** 하지만 이 두 데이터의 차이는 타겟과 선형 관계를 가질 수 있다.


== 5. Missing Values
* 누락된 값을 처리하는 두가지 방법
  ** 누락된 값이 포함된 행을 제거
    *** 장점 : 모델링을 위해 깨끗한 데이터만 남는다.
    *** 단점 : 데이터 수를 줄인다. (예측정확도가 낮아질 수 있다.)
  ** 통계치(최빈값,평균 등)로 대체한다.
    *** 장점 : 해당 열의 나머지 컬럼에 대해서는 활용할 수 있다.
    *** 단점 : 모델 학습에 노이즈로 작용한다.
* 누락된 값을 채우기 위한 최소한의 데이터 수치는 없음
 * 많은 사람이 50% 이상인 경우 대체를 이용.

== 6. Imputing Missing Values
 * 누락된 값이 있는 컬럼이 수치형 데이터인 경우 각 열의 평균, 중앙값 또는 최빈값으로 대체한다.
 * pandas 에서는 pandas.DataFrame.fillna() 메서드를 이용.
