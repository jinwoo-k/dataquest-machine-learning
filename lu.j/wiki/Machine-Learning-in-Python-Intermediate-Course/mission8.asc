= Gradient Descent

== 1. Introduction to the data
* 프로 골퍼의 정확도와 거리에 대한 드라이빙 통계 데이터인 pga.csv 데이터를 이용
* 거리를 이용하여 정확성을 예측하는 것을 할 예정
* 데이터를 표준화하기 위해 각 값에 대해 평균을 뺀 다음 표준편차로 나눈다.

[source,python]
----
import pandas
import matplotlib.pyplot as plt

# Read data from csv
pga = pandas.read_csv("pga.csv")

# Normalize the data
pga.distance = (pga.distance - pga.distance.mean()) / pga.distance.std()
pga.accuracy = (pga.accuracy - pga.accuracy.mean()) / pga.accuracy.std()
print(pga.head())

plt.scatter(pga.distance, pga.accuracy)
plt.xlabel('normalized distance')
plt.ylabel('normalized accuracy')
plt.show()
----

image::./images/8-1.PNG[plot]

== 2. Linear model
* 이 플롯에서 데이터는 음의 기울기를 가진 선형으로 보이고 거리가 멀수록 정확도가 떨어지는걸 볼 수 있다.
* 아래와 같이 모델링 할 수 있다.

image::./images/8-2.PNG[model]

* 여기서 세타는 계수이고 입실론은 오차항이다.

[source,python]
----
from sklearn.linear_model import LinearRegression
import numpy as np

# We can add a dimension to an array by using np.newaxis
print("Shape of the series:", pga.distance.shape)
print("Shape with newaxis:", pga.distance[:, np.newaxis].shape)

# The X variable in LinearRegression.fit() must have 2 dimensions
lm = LinearRegression()
lm.fit(pga.distance[:, np.newaxis], pga.accuracy)
theta1 = lm.coef_[0]
----

== 3. Cost function, Introduction
* 최소 제곱을 이용해 선형 모델의 계수를 추정하기 위해 sklearn 라이브러리를 활용했다.
* 최소 제곱 - 대수적으로 모델의 제곱 오차의 합을 최소화하는 방법
* Gradient Descent 는 선형 모델을 포함해 거의 모든 모델의 계수를 추정하는데 사용할 수 있다.
* 비용함수는 모델 예측과 계수를 매개변수로 사용해 관측치의 차이를 측정

image::./images/8-3.PNG[모델]

* 우리 모델이 위와 같다면 비용함수는 아래와 같이 표현할 수 있다.

image::./images/8-4.PNG[비용함수]

* 비용은 예측과 관측 제곱의 평균차이의 1/2이다.

[source,python]
----
# The cost function of a single variable linear model
def cost(theta0, theta1, x, y):
    # Initialize cost
    J = 0
    # The number of observations
    m = len(x)
    # Loop through each observation
    for i in range(m):
        # Compute the hypothesis
        h = theta1 * x[i] + theta0
        # Add to cost
        J += (h - y[i])**2
    # Average and normalize cost
    J /= (2*m)
    return J

# The cost for theta0=0 and theta1=1
print(cost(0, 1, pga.distance, pga.accuracy))

theta0 = 100
theta1s = np.linspace(-3,2,100)
costs = []
for theta1 in theta1s:
    costs.append(cost(theta0, theta1, pga.distance, pga.accuracy))

plt.plot(theta1s, costs)
----

image::./images/8-5.PNG[plot]

== 4. Cost function, continued
* 비용함수는 기울기와 관련하여 2차함수이며 전체 최소값이 있다
* 전역 최소값 : 함수가 가장 낮은 값을 갖는 지점
* 비용 함수의 최소값은 모델이 가장 낮은 오차를 갖는 지점이고 매개변수가 최적화되는 지점

[source,python]
----
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

# Example of a Surface Plot using Matplotlib
# Create x an y variables
x = np.linspace(-10,10,100)
y = np.linspace(-10,10,100)

# We must create variables to represent each possible pair of points in x and y
# ie. (-10, 10), (-10, -9.8), ... (0, 0), ... ,(10, 9.8), (10,9.8)
# x and y need to be transformed to 100x100 matrices to represent these coordinates
# np.meshgrid will build a coordinate matrices of x and y
X, Y = np.meshgrid(x,y)
print(X[:5,:5],"\n",Y[:5,:5])

# Compute a 3D parabola
Z = X**2 + Y**2

# Open a figure to place the plot on
fig = plt.figure()
# Initialize 3D plot
ax = fig.gca(projection='3d')
# Plot the surface
ax.plot_surface(X=X,Y=Y,Z=Z)

plt.show()

# Use these for your excerise
theta0s = np.linspace(-2,2,100)
theta1s = np.linspace(-2,2, 100)
COST = np.empty(shape=(100,100))
# Meshgrid for paramaters
T0S, T1S = np.meshgrid(theta0s, theta1s)
# for each parameter combination compute the cost
for i in range(100):
    for j in range(100):
        COST[i,j] = cost(T0S[0,i], T1S[j,0], pga.distance, pga.accuracy)

# make 3d plot
fig2 = plt.figure()
ax = fig2.gca(projection='3d')
ax.plot_surface(X=T0S,Y=T1S,Z=COST)
plt.show()
----

image::./images/8-6.PNG[plot]

== 5. Cost function, slopes
* theta0에 대한 비용 함수의 편미분 : ∂J (θ0, θ1) ∂θ0 = 1mΣi = 1m (hθ (xi) -yi)
* theta1에 의한 비용 함수의 부분 유도 : ∂J (θ1) ∂θ1 = 1mΣi = 1m (hθ (xi) -yi) * xi
* 우리는 아래 theta1의 도함수를 계산하는 코드를 작성했다.
* X는 특징 벡터, Y는 목표값

[source,python]
----
# Partial derivative of cost in terms of theta0
def partial_cost_theta0(theta0, theta1, x, y):
    # Hypothesis
    h = theta0 + theta1*x
    # Difference between hypothesis and observation
    diff = (h - y)
    # Compute partial derivative
    partial = diff.sum() / (x.shape[0])
    return partial

partial0 = partial_cost_theta0(1, 1, pga.distance, pga.accuracy)
----

== 6. Gradient descent algorithm
* 기울기와 요격을 변화시킴으로써 비용이 크게 달라짐을 알 수 있다.
* 관측치 간의 오차를 최소화하기 위해 매개 변수를 변경해 비용함수의 최소값을 구할수 있다.
* Gradient descent는 최적의 매개변수를 찾는데 널리 이용되는 방법
* 두 변수의 일반적인 gradient descent 알고리즘

image::./images/8-7.PNG[algorithm]

* α : 학습속도(0.0001 ~ 1 사이), 너무 작으면 너무 많은 반복, 너무 크면 최소값을 초과할 수 있음

== 7. Gradient descent algorithm

[source,python]
----
# x is our feature vector -- distance
# y is our target variable -- accuracy
# alpha is the learning rate
# theta0 is the intial theta0
# theta1 is the intial theta1
def gradient_descent(x, y, alpha=0.1, theta0=0, theta1=0):
    max_epochs = 1000 # Maximum number of iterations
    counter = 0      # Intialize a counter
    c = cost(theta1, theta0, pga.distance, pga.accuracy)  ## Initial cost
    costs = [c]     # Lets store each update
    # Set a convergence threshold to find where the cost function in minimized
    # When the difference between the previous cost and current cost
    #        is less than this value we will say the parameters converged
    convergence_thres = 0.000001
    cprev = c + 10
    theta0s = [theta0]
    theta1s = [theta1]

    # When the costs converge or we hit a large number of iterations will we stop updating
    while (np.abs(cprev - c) > convergence_thres) and (counter < max_epochs):
        cprev = c
        # Alpha times the partial deriviative is our updated
        update0 = alpha * partial_cost_theta0(theta0, theta1, x, y)
        update1 = alpha * partial_cost_theta1(theta0, theta1, x, y)

        # Update theta0 and theta1 at the same time
        # We want to compute the slopes at the same set of hypothesised parameters
        #             so we update after finding the partial derivatives
        theta0 -= update0
        theta1 -= update1

        # Store thetas
        theta0s.append(theta0)
        theta1s.append(theta1)

        # Compute the new cost
        c = cost(theta0, theta1, pga.distance, pga.accuracy)

        # Store updates
        costs.append(c)
        counter += 1   # Count

    return {'theta0': theta0, 'theta1': theta1, "costs": costs}

print("Theta1 =", gradient_descent(pga.distance, pga.accuracy)['theta1'])
descend = gradient_descent(pga.distance, pga.accuracy, alpha=.01)
plt.scatter(range(len(descend["costs"])), descend["costs"])
plt.show()
----


image::./images/8-8.PNG[plot]

== 8. Conclusion
* 그라디언트 디센트를 이용해 신경망을 학습할 예정이다.
