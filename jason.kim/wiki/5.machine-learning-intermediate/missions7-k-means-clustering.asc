= K-Means Clustering
Learn how to use K-means clustering to group together similar NBA players.

== 1. Clustering NBA Players
* 2013-2014 시즌의 선수 성적 데이터셋을 이용한다.
* 주요 컬럼
  ** player -- name of the player
  ** pos -- the position of the player
  ** g -- number of games the player was in
  ** pts -- total points the player scored
  ** fg. -- field goal percentage
  ** ft. -- free throw percentage

[source,python]
----
import pandas as pd
import numpy as np

nba = pd.read_csv("nba_2013.csv")
print(nba.head(3))
----

== 2. Point Guards
* 포인트 가드는 득점 기회를 만들어내는 포지션으로 팀의 가장 중요한 역할 중 하나이다.
* 클러스터링을 통해 포인트 가드의 유형을 시각화하고 유사한 포인트 가드를 그룹화 한다.
* 두개의 피쳐(Assist to Turnover Ratio, Points Per Game)를 이용한다.

[source,python]
----
point_guards = nba[nba['pos'] == 'PG']
print(point_guards)
----

== 3. Points Per Game
* 선수의 total points(pts) 와 number of games(g)를 이용하여 PPG 를 계산한다.

[source,python]
----
point_guards['ppg'] = point_guards['pts'] / point_guards['g']
print(point_guards[['pts', 'g', 'ppg']].head(5))
----

== 4. Assist Turnover Ratio
* image:./images/m7_4_1.png[, 150]

[source,python]
----
point_guards = point_guards[point_guards['tov'] != 0]
point_guards['atr'] = point_guards['ast'] / point_guards['tov']
print(point_guards.head())
----

== 5. Visualizing the Point Guards
* ppg 를 x 축으로, atr 을 y 축으로 산포도를 그린다.

[source,python]
----
plt.scatter(point_guards['ppg'], point_guards['atr'], c='y')
plt.title("Point Guards")
plt.xlabel('Points Per Game', fontsize=13)
plt.ylabel('Assist Turnover Ratio', fontsize=13)
plt.show()
----

== 6. Clustering players
* K-Means Clustering 은 인기 있는 중심 기반(centroid-based) 클러스터링 알고리즘이다.
* K-Means에서 K는 데이터를 분류 할 클러스터의 수를 의미
* 일반적인 비지도학습에서처럼 K를 지정해야함. (본 예에선 5를 이용)

== 7. The Algorithm
* K-Means 셋업은 각 클러스터의 중심과 해당 클러스터에 속한 플레이어와의 거리를 반복하여 재계산하는 알고리즘입니다.
  ** 초기화 : 5 명의 플레이어를 무작위로 선택하고 좌표를 클러스터의 초기 중심으로 지정
  ** 1 단계(클러스터에 포인트 할당)
    *** 모든 플레이어와 클러스터 주임좌표간 유클리드 거리 계산(atr & ppg 값 이용)
    *** 중심 값이 플레이어의 값과 가장 가까운 유클리드 거리가 가장 가까운 클러스터에 플레이어를 할당
  ** 2단계(클러스터의 새로운 중심 업데이트)
    *** 각 클러스터에 대해 해당 클러스터의 모든 포인트 (플레이어)의 산술 평균을 계산하여 새 중심을 계산
    *** 산술 평균은 모든 X 값 (atr)의 평균과 해당 클러스터의 모든 Y 값 (ppg)의 평균을 취하여 계산
  ** 클러스터가 더 이상 움직이지 않고 수렴 할 때까지 1 단계와 2 단계를 반복

[source,python]
----
# 임의의 초기 5개 중심 선택

num_clusters = 5
# Use numpy's random function to generate a list, length: num_clusters, of indices
random_initial_points = np.random.choice(point_guards.index, size=num_clusters)
# Use the random indices to create the centroids
centroids = point_guards.loc[random_initial_points]
----

== 8. Visualize Centroids
* 초기 중심을 산포도에 표현하기
* image:./images/m7_8_1.png[, 500]

[source,python]
----
plt.scatter(point_guards['ppg'], point_guards['atr'], c='yellow')
plt.scatter(centroids['ppg'], centroids['atr'], c='red')
plt.title("Centroids")
plt.xlabel('Points Per Game', fontsize=13)
plt.ylabel('Assist Turnover Ratio', fontsize=13)
plt.show()
----

== 9. Setup (continued)
* 이전 스탭에서 생성한 센트로이드를 쉽게 다루기 위해 cluster_id(0부터 k-1 까지의 정수)를 정의하고, 이 데이터를 dict에 담는다.

[source,python]
----
def centroids_to_dict(centroids):
    dictionary = dict()
    # iterating counter we use to generate a cluster_id
    counter = 0

    # iterate a pandas data frame row-wise using .iterrows()
    for index, row in centroids.iterrows():
        coordinates = [row['ppg'], row['atr']]
        dictionary[counter] = coordinates
        counter += 1

    return dictionary

centroids_dict = centroids_to_dict(centroids)
----


== 10. Step 1 (Euclidean Distance)
* n차원의 유클리드 거리 계산 : image:./images/m7_10_1.png[, 300]

[source,python]
----
import math

def calculate_distance(centroid, player_values):
    root_distance = 0

    for x in range(0, len(centroid)):
        difference = centroid[x] - player_values[x]
        squared_difference = difference**2
        root_distance += squared_difference

    euclid_distance = math.sqrt(root_distance)
    return euclid_distance

q = [5, 2]
p = [3,1]

# Sqrt(5) = ~2.24
print(calculate_distance(q, p))
----

== 11. Step 1 (Continued)
* 각각의 row 에 가장 가까운 중심의 cluster_id 입력

[source,python]
----
def assign_to_cluster(row):
    min_dist = float('inf')
    min_cluster_id = -1
    for key, value in centroids_dict.items():
        dist = calculate_distance(value, [row['ppg'], row['atr']])
        if dist < min_dist:
            min_dist = dist
            min_cluster_id = key
    return min_cluster_id


point_guards['cluster'] = point_guards.apply(lambda row: assign_to_cluster(row), axis=1)
print(point_guards.head())
----

== 12. Visualizing Clusters
* 각 클러스터별로 분류된 데이터를 산점도를 그린다.
image:./images/m7_12_1.png[, 500]

[source,python]
----
# Visualizing clusters
def visualize_clusters(df, num_clusters):
    colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k']

    for n in range(num_clusters):
        clustered_df = df[df['cluster'] == n]
        plt.scatter(clustered_df['ppg'], clustered_df['atr'], c=colors[n-1])
        plt.xlabel('Points Per Game', fontsize=13)
        plt.ylabel('Assist Turnover Ratio', fontsize=13)
    plt.show()

visualize_clusters(point_guards, 5)
----

== 13. Step 2
* 분류된 클러스터별 중심을 다시 계산

[source,python]
----
def recalculate_centroids(df):
    new_centroids_dict = dict()
    for cluster_id in range(0, num_clusters):
        clustered_df = df[df['cluster'] == cluster_id]
        ppg = clustered_df['ppg'].mean()
        atr = clustered_df['atr'].mean()
        new_centroids_dict[cluster_id] = [ppg, atr]

    return new_centroids_dict

centroids_dict = recalculate_centroids(point_guards)
----

== 14. Repeat Step 1
image:./images/m7_14_1.png[, 500]

[source,python]
----
point_guards['cluster'] = point_guards.apply(lambda row: assign_to_cluster(row), axis=1)
visualize_clusters(point_guards, num_clusters)
----

== 15. Repeat Step 2 and Step 1
* 중심 재계산

[source,python]
----
centroids_dict = recalculate_centroids(point_guards)
point_guards['cluster'] = point_guards.apply(lambda row: assign_to_cluster(row), axis=1)
visualize_clusters(point_guards, num_clusters)
----

== 16. Challenges of K-Means
* 반복을 진행하다보면 2 개의 클러스터가 거의 겹치는 영역에서 몇개의 포인트에서 계속 소속 클러스터가 변하는것을 볼 수 있다.
* 그외에 큰 변화가 없는 경우 아래와 같은 케이스이다.
  ** K-Means 반복 사이에 큰 변화가 없는 경우 한곳으로 수렴하며, 안정화 되고 있음을 의미
  ** K-Means 는 보수적이기 때문에 초기 중심의 선택과 각 플레이어를 클러스터에 할당하는 부분이 중요
* 위의 문제를 해결하기 위해 sklearn 에서 K-Means 구현은 여러가지 초기 중심을 활용해 전체 클러스터링 프로세스를 반복실행함.

[source,python]
----
from sklearn.cluster import KMeans

kmeans = KMeans(n_clusters=num_clusters)
kmeans.fit(point_guards[['ppg', 'atr']])
point_guards['cluster'] = kmeans.labels_

visualize_clusters(point_guards, num_clusters)
----
