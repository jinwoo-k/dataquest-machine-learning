== Vectors
=== step.1 From Matrices To Vectors
* 이전 핵심은 행렬은 숫자를 테이블로 표현
** 2x3 행렬: 두 행과 3열로 구성된 것을, three by two matrix 라 일컫음

** 숫자 목록을 벡터라 함. 행을 행 벡터 (row vector), 열을 열 벡터 (column vector)
*** row vector : [30 -1 -1000] [50 -1 -100]
*** column vector : [30 \n 50] [-1 \n -1] [-1000 \n -100]

** 열벡터와 이와 연관된 작업을 배울 예정 (이걸로 선형 시스템 해결)

=== step.2 Geometric Intuition Of Vectors
* 벡터는 시각화 가능. (0,0)을 기점으로 좌표에 표현 (첫번째는 x, 두번째는 y)
* 벡터는 방향과 크기를 가짐
* pyplot.quiver() 로 벡터 표현 가능
```
# (0,0) -> (1,2)
plt.quiver(0, 0, 1, 2)
# add angles and scale_units
plt.quiver(0, 0, 1, 2, angles='xy', scale_units='xy', scale=1)
# add color
plt.quiver(0, 0, 1, 2, angles='xy', scale_units='xy', scale=1, color='blue')
```

ref : http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.quiver

=== step.3 Vector Operations
* 행렬의 행과 같이 벡터를 더하거나 빼기 가능
** 첫 행의 끝에서 두번째 행 시작지점 연결
** 뺄셈의 경우 두번째 행렬의 벡터값을 전부 -1로 곱한 값을 더하는 것과 같음

image:https://s3.amazonaws.com/dq-content/161/vector_addition_two.svg[]
image:https://s3.amazonaws.com/dq-content/161/vector_subtraction.svg[]

=== step.4 Scaling Vectors
* 스칼라 (실수)로 곱하거나 나눠서 벡터를 스케일 가능
* 벡터를 결합해 다른 벡터를 만드는 것이 선형대수의 핵심

=== step.5 Vectors In NumPy
* 지금껏 행렬의 곱,덧셈을 배웠음.
* 맨처음 배운 np.asarray 에서 이런 연산 가능
```
import numpy as np

vector_one = np.asarray([
    [1],
    [2],
    [1]
], dtype=np.float32)
vector_two = np.asarray([
    [3],
    [0],
    [1]
], dtype=np.float32)

vector_linear_combination = vector_one * 2 + vector_two * 5
```

=== step.6 Dot Product
* dot product (내적): 곱셈과 유사, 같은 수의 요소를 가진 두 행렬에서 같은 위치를 곱한 후 합산

image:https://wikimedia.org/api/rest_v1/media/math/render/svg/9ea18d2fd6c39f5522e50b201b700a32ef43438a[]

* 다른 벡터 연산과 달리 결과 값은 벡터가 아닌 스칼라
* np.dot : 하나는 열 벡터로 표현, 하나는 행 벡터로 표현되어야 함
```
vector_dp = np.dot(vector_one[:,0], vector_two)
```

ref : https://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html

=== step.7 Linear Combination
* 벡터에 스칼라로 곱하거나 벡터끼리 더하거나 빼기로 벡터를 결합하는것 외에 다른 연산
* 선형 결합: 스칼라 곱셈을 사용해 벡터를 스케일하고, 스케일된 벡터를 더하거나 빼는 연산으로 결합

image:https://s3.amazonaws.com/dq-content/161/linear_combination_solution.svg[]

=== step.8 Linear Combination And Vectors
* 맨 처음 급여 계산을 행렬연산으로 풀었을 때처럼 두 벡터의 선형 결합으로 연결

image:./images/vector_combine.png[width="300px"]

=== step.9 The Matrix Equation

image:./images/matrix_equation_exam.png[width='500px']
image:./images/matrix_equation.png[width='100px']

* 위 수식 설명
** A : 계수 행렬
** x : 해의 벡터
** b : 상수 (모든 값이 제로인 제로벡터는 안됨)

* 다음 미션 전 알아야할 것
** 행렬을 어떻게 결합하는지
** 어떻게 행렬에 벡터로 곱을 하는지
** 어떻게 가우스 제거를 사용하지 않고 x vector 를 해결하는지

=== step.10 Next Step



== reference
행렬 기본 : https://ko.wikipedia.org/wiki/%ED%96%89%EB%A0%AC
행렬 곱셈 : https://ko.wikipedia.org/wiki/%ED%96%89%EB%A0%AC_%EA%B3%B1%EC%85%88

tip: http://latex2png.com/
