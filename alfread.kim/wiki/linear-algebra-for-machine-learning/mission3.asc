= Matrix Algebra

== Basic Matrix Operations
 * addition and substraction
  ** 같은 수의 행과 열을 포함하는 행렬 사이에서 행렬 더하기와 빼기를 수행 할 수 있음

image:./images/add-sub-matrix.PNG[]

  * multiply a matrix by a scalar value

image:./images/mul-scala-matrix.PNG[]

== Matrix Vector Multiplication
 * 행렬에 벡터를 곱하려면 행렬의 열 수를 벡터의 행 수와 일치시켜야 함.

image:./images/mul-matrix-vector.PNG[]

 * https://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html[numpy.dot()]

== Matrix Multiplication
 * 행렬은 열 벡터로 구성되며 행렬 벡터 곱셈에 대해 배운 내용을 확장하여 행렬을 곱할 수 있음
 * 첫번째 행렬의 열수와 두번째 행렬의 행수가 일치하여야 한다.

image:./images/mul-mat-mat.PNG[]

 * 교환법칙이 성립하지 않는다.
 * https://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html[numpy.dot()]


== Matrix Transpose (전치)

image:./images/tran-matrix.PNG[]

* 덧셈에 대한 전치의 분배법칙

image:./images/tran-add-matrix.PNG[]

* 곱셈에 대한 전치의 분배법칙

image:./images/tran-mul-matrix.PNG[]

* https://docs.scipy.org/doc/numpy-1.12.0/reference/generated/numpy.transpose.html[numpy.transpose()]

== Identity Matrix (https://ko.wikipedia.org/wiki/%EB%8B%A8%EC%9C%84%ED%96%89%EB%A0%AC[단위행렬])
 * 단위행렬은 대각선을 따라 1을 가지고 다른 원소는 모두 0 임.
 * 단위행렬은 정사각행렬이다 (행수와 열수가 같다)
 * 단위행렬은 곱셈에 대한 항등원
  ** Ix = x
  ** xI = x

image:./images/identity_matrix.PNG[]

 * https://docs.scipy.org/doc/numpy/reference/generated/numpy.identity.html[numpy.indentity()]

== Matrix Inverse
 * 행렬의 역행렬은 곱셈 역원의 개념과 유사함
   ** 행렬의 역행렬 : 행렬A 에 대하여 AB = BA = I(단위행렬) 를 만족하는 B가 존재하면 , B는 A의 역행렬

image:./images/inverse_matrix.PNG[]

 * https://docs.scipy.org/doc/numpy/reference/generated/numpy.identity.html[numpy.identity()]

image:./images/inverse_matrix1.PNG[]

 *  determinent of matrix (행렬식) : det(A) =  |A|  = 1 /(ad-bc)
    ** 만일 det(A) <> 0 이면 역행렬이 존재 (정칙행렬= 가역행렬 = 비특이행렬)

 * 참고사항
   ** 행렬식의 성질
     *** 두 열이 같으면 |A| = 0
     *** 영행을 가지고 있으면 |A| = 0
     *** |A| = |A^t|
     *** |AB| = |A||B|
     *** |A^-1| = 1/|A|
     ***  행연산과 행렬식
image:./images/det_row_op.PNG[]

== Solving The Matrix Equation
 * https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.inv.html[numpy.linalg.inv()]

== Determinant For Higher Dimensions
  * square matrix (정방행렬) : 행의 수와 열의 수가 같다.
  * https://docs.scipy.org/doc/numpy-1.12.0/reference/generated/numpy.linalg.det.html[numpy.linalg.det()]
  * https://ko.wikipedia.org/wiki/%EB%9D%BC%ED%94%8C%EB%9D%BC%EC%8A%A4_%EC%A0%84%EA%B0%9C[라플라스 전개]
     ** 행렬식을 더 작은 행렬식(소행렬식)과 그에 맞는 부호를 곱한 것들의 합으로 전개하는 것.
     ** M(i,j) 소행렬식
     ** C(i,j) 여인자 = (-1)^(i+j)*M(i,j)

== Matrix Inverse For Higher Dimensions
 *  여인수 행렬
image:./images/coef_matrix.PNG[]
 * 수반행렬 adj(A) : 여인수 행렬의 전치행렬
 * 수반행렬을 이용하여 역행렬 구하기 : A^-1 = 1/det(A) * adj(A)

 * 참고사항
   ** 기본행연산 : Ri,  Ri(k),  Ri,j(k)
   ** 기본행연산의 역연산
   ** 기본행연산으로 역행렬 구하기     :  [A|I]  => [I|A^-1]
   ** 첨가행렬의 변환을 통한 해 구하기 : [A|b] => [I|x]

