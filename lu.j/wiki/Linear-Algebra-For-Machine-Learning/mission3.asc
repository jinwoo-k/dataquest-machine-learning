= Matrix Algebra

== 1. Basic Matrix Operations
* 여기서는 핵심 행렬연산을 배우고 그 중 일부로 행렬방정식을 풀 예정
* 행렬의 덧셈과 뺄셈에 대해 알아보자.

image::./images/3/1-1.PNG[행렬]

* 동일한 수의 행과 열을 포함하는 행렬 사이에서 행렬 덧셈과 뺄셈을 수행할 수 있다.

image::./images/3/1-2.PNG[행렬]

image::./images/3/1-3.PNG[행렬]

* 스칼라 곱

image::./images/3/1-4.PNG[행렬]

== 2. Matrix Vector Multiplication
* 행렬에 벡터를 곱하면 행렬의 각 행을 본질적으로 열벡터와 결합한다.

image::./images/3/1-5.PNG[행렬]

* 행렬과 벡터를 곱하려면 행렬의 열 수를 벡터의 행수와 일치시켜야함

image::./images/3/1-6.PNG[행렬]

* NumPy에서 행렬에 벡터를 곱하려면 numpy.dot() 함수를 사용함

== 3. Matrix Multiplication
* 행렬은 열벡터로 구성된다.
* 행렬 벡터 곱셈에서 행렬의 각 행과 열벡터 사이에 내적을 수행했음
* 행렬 곱셈에서 첫번째 행렬의 각 행과 두번째 행렬의 각 행 사이에 내적을 수행하기 위해 확장함.

image::./images/3/1-7.PNG[행렬]

* 행렬 벡터 곱셈과 마찬가지로 첫번째 행렬의 열은 두번째 행렬의 행수와 일치해야함

image::./images/3/1-8.PNG[행렬]

** 곱셈의 순서도 중요

image::./images/3/1-9.PNG[행렬]

== 4. Matrix Transpose
* 행렬의 전치 : 행렬의 행과 열을 전환
* 전치 작업은 회전으로도 생각할수 있다.
* 다음은 행렬의 전치를 시각적으로 표현

image::./images/3/Matrix_transpose.gif[행렬의전치]

* 수학적으로 우리는 AT를 사용하여 전치를 지정한다.

image::./images/3/1-10.PNG[]
image::./images/3/1-11.PNG[]
image::./images/3/1-12.PNG[]

== 5. Identity Matrix
* 단위행렬은 곱셈의 항등원

image::./images/3/1-13.PNG[]

image::./images/3/1-14.PNG[]

== 6. Matrix Inverse
* 역행렬은 5x = 10에서 x를 구하길 원한다면 양변에 5의 곱셈 역수 1/5를 곱하는 것과 유사하다.
* 곱셈에서는 특정 항을 상쇄하기 위해 사용하지만 계산은 완전히 다르다.

image::./images/3/1-15.PNG[]

* ad-bc는 결정자임
* 2x2행렬의 경우 ad-bc가 0이 아닐때만 역변환이 가능하다.


== 7. Solving The Matrix Equation
* 이제 행렬식을 계산해보자

image::./images/3/1-16.PNG[]
image::./images/3/1-17.PNG[]
image::./images/3/1-18.PNG[]

== 8. Determinant For Higher Dimensions
* 정사각행렬 : 행과 열의 개수가 같은 행렬
* ad-bc(결정자) 가 0이 아닌 경우에만 역행렬을 계산할 수 있음

image::./images/3/1-19.PNG[]
image::./images/3/1-20.PNG[]
image::./images/3/1-21.PNG[]


== 9. Matrix Inverse For Higher Dimensions
* 고차원 행렬의 행렬식과 마찬가지로 행렬 역함수는 행렬의 위치에 종속적인 부 행렬을 생성해서 동작한다.

== 예제모음

=== 2.

[source,python]
----
matrix_a = np.asarray([
    [0.7, 3, 9],
    [1.7, 2, 9],
    [0.7, 9, 2]
], dtype=np.float32)

vector_b = np.asarray([
    [1], [2], [1]
], dtype=np.float32)

ab_product = np.dot(matrix_a, vector_b)
----

=== 3.

[source,python]
----
matrix_a = np.asarray([
    [0.7, 3],
    [1.7, 2],
    [0.7, 9]
], dtype=np.float32)

matrix_b = np.asarray([
    [113, 3, 10],
    [1, 0, 1],
], dtype=np.float32)
product_ab = np.dot(matrix_a, matrix_b)
product_ba = np.dot(matrix_b, matrix_a)

print(product_ab)
print(product_ba)
----

=== 4.

[source,python]
----
matrix_a = np.asarray([
    [0.7, 3],
    [1.7, 2],
    [0.7, 9]
], dtype=np.float32)

matrix_b = np.asarray([
    [113, 3, 10],
    [1, 0, 1],
], dtype=np.float32)
transpose_a = np.transpose(matrix_a)
print(np.transpose(transpose_a))

trans_ba = np.dot(np.transpose(matrix_b), np.transpose(matrix_a))
print(trans_ba)

trans_ab = np.dot(np.transpose(matrix_a), np.transpose(matrix_b))
print(trans_ab)

product_ab = np.dot(matrix_a, matrix_b)
print(np.transpose(product_ab))
----


=== 5.

[source,python]
----
i_2 = np.identity(2)
i_3 = np.identity(3)

matrix_33 = np.asarray([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
])

matrix_23 = np.asarray([
    [0.7, 3, 1],
    [1.7, 2, 10],
], dtype=np.float32)

identity_33 = np.dot(i_3, matrix_33)
identity_23 = np.dot(i_2, matrix_23)

print(identity_33)
print(identity_23)
----


=== 6.

[source,python]
----
matrix_a = np.asarray([
    [1.5, 3],
    [1, 4]
])
def matrix_inverse_two(mat):
    det = (mat[0,0]*mat[1,1] - mat[0,1]*mat[1,0])
    if det == 0:
        raise ValueError("The matrix isn't invertible")
    right_mat = np.asarray([
        [mat[1,1], -mat[0,1]],
        [-mat[1,0], mat[0,0]]
    ])
    inv_mat = np.dot(1/det, right_mat)
    return inv_mat
inverse_a = matrix_inverse_two(matrix_a)
i_2 = np.dot(inverse_a, matrix_a)
print(i_2)
----


=== 7.

[source,python]
----
matrix_a = np.asarray([
    [30, -1],
    [50, -1]
])

vector_b = np.asarray([
    [-1000],
    [-100]
])
matrix_a_inverse = np.linalg.inv(matrix_a)
solution_x = np.dot(matrix_a_inverse, vector_b)
print(solution_x)
----


=== 8.

[source,python]
----
matrix_22 = np.asarray([
    [8, 4],
    [4, 2]
])

matrix_33 = np.asarray([
    [1, 1, 1],
    [1, 1, 6],
    [7, 8, 9]
])
det_22 = np.linalg.det(matrix_22)
det_33 = np.linalg.det(matrix_33)

print(det_22)
print(det_33)
----
