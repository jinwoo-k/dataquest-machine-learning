== Matrix Algebra
=== 1. Basic Matrix Operations

* 덧셈과 뺄셈
** 행렬은 하나 이상의 열벡터로 구성됨
** 동일 수의 행가진 벡터끼리 덧셈/뺄셈 가능 ⇒ 동일 수의 행,열을 가진 행렬이 덧심/뺄셈 가능
image:./images/matrix_vector_decomposition.png[]

* 하나의 행렬에 스칼라를 곱하는 연산이 가능함
image:./images/matrix_scala_multiple.png[]

=== 2. Matrix Vector Multiplication
* 행렬과 벡터의 곱: 행렬의 각 행을 열 벡터와 결합
** 행렬의 열 수를 벡터의 행 수와 일치시켜야 함
image:./images/matrix_vector_multiplication.png[]

=== 3. Matrix Multiplication
* 행렬은 열 벡터로 구성되며 행렬 벡터 곱셈에 대해 배운 내용을 확장하여 행렬을 곱할 수 있음
* 각 행렬의 행과 열 벡터 사이에 내적 (dot product)을 함
image:./images/matrix_multiplication.png[]

* 첫번째 행렬의 열수와 두번째 행렬의 행수가 일치해야 함
image:./images/valid_matrix_multiplication.png[]
* 곱은 교환법칙 성립 안함. (AB 와 BA 는 완전 다르다)

=== 4. Matrix Transpose (전치 행렬)
* 행렬의 전치(transpose): 행렬의 행과 열을 바꿈 (rotate 회전과 같다.)
* 종종 다른 차원의 테이블을 사용하는데, 이럴때 행렬곱을 위해 transpose (전치)를 수행 (기본적으론 행과 열이 같으면 전치가 불필요)
image:./images/Matrix_transpose.gif[]

* 덧셈과 곱셈에서 전치의 분배의 법칙

image:./images/matrix_transpose_1.png[]

image:./images/matrix_transpose_2.png[]

전치행렬 성질 참고 ref: https://ko.wikipedia.org/wiki/%EC%A0%84%EC%B9%98%ED%96%89%EB%A0%AC

```
transpose_a = np.transpose(matrix_a)
```
=== 5. Identity Matrix (단위 행렬)

* 대각선은 모두 1을 가지고 나머지는 0 (정사각행렬)
image:./images/Identity_matrix.png[]
* 단위행렬은 곱셈의 항등원
image:./images/identity_matrix_multiple.png[width="700px"]

=== 6. Matrix Inverse (역행렬)
* Ax = b 에서 A 를 없애는 방법. 즉, A 를 항등행렬로 변환 ⇒ 역행렬을 곱하면 됨
** 행렬A 에 대하여 AB = BA = I(단위행렬) 를 만족하는 B가 존재하면 , B는 A의 역행렬

image:./images/Matrix_Inverse.png[width="300px"]

image:./images/matrix_inverse_multiple.png[]

image:./images/matrix_inverse_multiple_result.png[]

* "ad-bc" 는 결정자 (determinant)

* 2x2 행렬의 경우, ad-bc 가 0 이 아닐때만 역변환이 가능

* 행렬식(판별식)이 0이 아닌지 여부는 연립방정식이 유일한 해를 갖는지를 결정

<참고 사항>

* determinent of matrix (행렬식) : det(A) = |A| = ad-bc
** 만일 det(A) <> 0 이면 역행렬이 존재 (https://ko.wikipedia.org/wiki/%EA%B0%80%EC%97%AD%ED%96%89%EB%A0%AC[정칙행렬]= 가역행렬 = 비특이행렬)
* 행렬식의 성질
** 두 열이 같으면 |A| = 0
** 영행을 가지고 있으면 |A| = 0
** |A| = |A^t|
** |AB| = |A||B|
** |A^-1| = 1/|A|
** 행연산과 행렬식
image:./images/det_row_op.png[]

```
from numpy.linalg import inv
# compute inverse of matrix_a
inv(matrix_a)
```
=== 7. Solving The Matrix Equation
image:./images/solving_matrix1.png[]

image:./images/solving_matrix2.png[]

image:./images/solving_matrix3.png[]

=== 8. Determinant For Higher Dimensions
* square matrix (정방행렬) : 같은 열과 행으로 된 행렬 (정사각행렬) + determinant (결정자) 가 0 이 아니여야 함

* https://ko.wikipedia.org/wiki/%EB%9D%BC%ED%94%8C%EB%9D%BC%EC%8A%A4_%EC%A0%84%EA%B0%9C[라플라스 전개]
   ** 행렬식을 더 작은 행렬식(소행렬식)과 그에 맞는 부호를 곱한 것들의 합으로 전개하는 것.
   ** M(i,j) 소행렬식
   ** C(i,j) 여인자 = (-1)^(i+j)*M(i,j)
image:./images/laplace.png[]

ref : http://judis.me/wordpress/2015/10/12/%EC%84%A0%ED%98%95%EB%8C%80%EC%88%98-note-19-determinant-formulas-and-cofactors/

```
# numpy 에서 한번에 계산해줌
det_22 = numpy.linalg.det(matrix_22)
```

=== 9. Matrix Inverse For Higher Dimensions

수반행렬 adj(A) : 여인수 행렬의 전치행렬

수반행렬을 이용하여 역행렬 구하기 : A^-1 = 1/det(A) * adj(A)

<참고사항>

** https://namu.wiki/w/%ED%81%AC%EB%A0%88%EC%9D%B4%EB%A8%B8%20%EB%B2%95%EC%B9%99[크래이머법칙]
** 기본행연산 : Ri, Ri(k), Ri,j(k)
** 기본행연산의 역연산
** 기본행연산으로 역행렬 구하기 : [A|I] ⇒ [I|A^-1]
** 첨가행렬의 변환을 통한 해 구하기 : [A|b] ⇒ [I|x]
