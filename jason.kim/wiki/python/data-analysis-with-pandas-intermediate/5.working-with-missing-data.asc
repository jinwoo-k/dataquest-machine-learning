= Working With Missing Data
Learn to handle missing data using pandas and a data set on Titanic survival.

== 1. Introduction
* 타이타닉의 승객 생존 기록 데이터를 정제, 분석 한다.

== 2. Introduction
* pandas 를 이용해 CSV 파일을 읽어 pandas DF로 만든다.
[source,python]
----
import pandas as pd
titanic_survival = pd.read_csv('titanic_survival.csv')
----

== 3. Finding The Missing Data
* 누락된 데이터는 여러가지 모양을 갖는다. => None, NaN
* 일반적으로는 두가지 모두 null values 라고 부른다.
* pandas.isnull() 메서드를 이용하면 null 값의 index에 true 가 채워져 반환된다.
[source,python]
----
age = titanic_survival["age"]
age_is_null = pandas.isnull(age)
age_null_true = age[age_is_null]
age_null_count = len(age_null_true)
print(age_null_true)
----

== 4. Whats The Big Deal With Missing Data?
* 누락된 값이 있는 컬럼을 이용해 평균을 내는등의 연산을 하고 싶다면 누락된 로우는 제거해야한다.
* 아래 예제는 비어있지 않은 age 들에 대한 평균값을 구한다.
[source,python]
----
age_is_null = pd.isnull(titanic_survival["age"])
good_ages = titanic_survival["age"][age_is_null == False]
correct_mean_age = sum(good_ages) / len(good_ages)
----




image::./images/m3_1_1.png[]

== 2. Introduction To Derivatives
* 곡선의 가장 높은 지점은 양의 기울기에서 음의 기울기로의 전환점이다.
* 도함수 : 곡선의 함수로부터 얻을 수 있는 특점 점에서의 기울기 함수이다.
* 기울기 함수는 다음과 같이 표현한다.

image::./images/m3_2_1.png[]

== 3. Differentiation (미분)
* 함수의 도함수를 찾는 과정을 미분이라 한다.
* 원래의 함수로부터 이전스탭에서의 기울기 함수를 구한 후 expending, cancelling 과정을 거치면 도함수를 얻을 수 있다.

image::./images/m3_3_1.png[]

== 4. Critical Points
* x에 대해 미분 은 다음과 같이 표현한다.

image::./images/m3_4_1.png[]

* 함수의 임계점(critical point)에서의 기울기는 0이거나 정의되지 않는다.
* 모든 임계점이 경사면의 전환점은 아니다. (y = x^3 의 경우 도함수는 y' = 3x^2 으로 음수가 결과로 나오지 않는다.)

image::./images/m3_4_2.png[]

== 5. Extreme Values
* 임계점들(critical points)은 데이터 과학에서 극값과 관련이 있다.
* 극값은 최소값과 최대 값의 2 가지 범주로 나눌 수 있습니다.
* 특정 임계점에서 기울기가 음수에서 양수로 바뀌면 해당 임계점은 최대값이 될 수 있고, 반대라면 최소값이 될 수 있다.
* 기울기가 임계점에서 전환되지 않으면 (예 : 마지막 화면에서 y = x^3에 대해 x = 0과 같이) 최소 또는 최대 점이 될 수 없다.

image::./images/m3_5_1.png[]

* 위의 그림에서 보듯이 각 포인트를 둘러싸는 간격에서 가장 낮거나 높은 값이 있는데 이를 극값(local extrema)이라 한다.
* 임계점이 그 주변의 간격에서 가장 높은점을 극대값(relative maximum), 가장 낮은점을 극소값(relative minimum)이라 한다.

image::./images/m3_5_2.png[]

* 극대값, 극소값이 되는 임계점은 산술게산으로도 구할 수 있다. (도함수에서 x의 해)

== 6. Power Rule (거듭제곱함수 법칙)
* 도함수를 구해 임계점을 구하는 방식은 아래와 같이 함수의 지수가 높아질수록 계산하기 힘들다.

image::./images/m3_6_1.png[]

* 대신 도함수를 쉽게 구할 수 있는 미분법칙이 있다.

image::./images/m3_6_2.png[]

== 7. Linearity Of Differentiation
* 덧셈 규칙

image::./images/m3_7_1.png[]

* 곱셈 규칙

image::./images/m3_7_2.png[]

* 위의 두 규칙을 이용한 미분

image::./images/m3_7_3.png[]

== 8. Practicing Finding Extreme Values
* f(x) = x^3 - x^2 의 임계점을 구한 후 최대값, 최소값을 구함
[source,python]
----
import numpy as np
import matplotlib.pyplot as plt

derivative = '3x^2 - 2x'
critical_points = [0, 2/3]

x = np.linspace(-1, 2, 100)
y = x**3 - x**2

plt.plot(x, y)

rel_min = [2/3]
rel_max = [0]
----

image::./images/m3_8_1.png[]
