= Vectors

== 1. From Matrices To Vectors
* 행렬의 각 행과 열은 숫자 list다. 이 숫자 list를 벡터라고 한다.
* 행렬의 행을 행벡터, 열을 열벡터

image::./images/2/1-1.PNG[행렬]

* 행벡터

image::./images/2/1-2.PNG[행벡터]

* 열벡터

image::./images/2/1-3.PNG[열벡터]

* 이 미션에서는 선형시스템의 특정 속성을 이해하는데 도움이 되는 열벡터 및 관련 작업에 대해 알아보도록 한다.

== 2. Geometric Intuition Of Vectors
* 벡터에 2개 또는 3개의 요소가 포함되어 있을때 좌표 격자에 시각화 할 수 있다.
* 두 요소가 포함된 벡터는 첫번째 값이 X좌표, 두번째 값은 Y좌표를 뜻함

image::./images/2/2-1.PNG[벡터그래프]

* 화살표는 벡터의 방향과 크기 2가지 주요 속성을 나타낸다.

image::./images/2/2-2.PNG[벡터그래프]

* 벡터는 pyplot.quiver() 함수를 사용해 벡터를 시각화 할 수 있다.
** 필수 파라미터 : X, Y, U, V
*** X, Y : 벡터의 시작 좌표
*** U, V : 벡터의 끝나는 좌표
*** (0, 0) -> (1, 2) 까지의 벡터를 나타내는 화살표를 그리는 코드

[source,python]
----
plt.quiver(0, 0, 1, 2)
----

* angle, scale_units 매개변수를 xy로 설정하고 scale 매개변수를 1로 설정해야한다.
* angle을 'xy'로 설정하면 벡터의 각도를 지정한 점 사이로 유지하게 할 수 있다.
* scale_units, scale 매개변수를 사용하면 벡터에 대한 사용자 정의 크기 조정 매개변수를 지정할 수 있다.

[source,python]
----
plt.quiver(0, 0, 1, 2, angles='xy', scale_units='xy', scale=1)
----

image::./images/2/2-3.PNG[벡터그래프]

== 3. Vector Operations
* 행렬의 행과 마찬가지로 벡터를 더하거나 뺄 수 있다.

image::./images/2/3-1.PNG[벡터그래프]

* 벡터 덧셈의 시각화

image::./images/2/3-2.PNG[벡터덧셈]

image::./images/2/3-3.PNG[벡터덧셈결과]

* 벡터 뺄셈

image::./images/2/3-4.PNG[벡터뺄셈]

image::./images/2/3-5.PNG[벡터뺄셈결과]

== 4. Scaling Vector
* 우리는 벡터에 스칼라를 곱하거나 나눌수 있다.

image::./images/2/4-1.PNG[벡터뺄셈결과]

== 5. Vectors In NumPy
* NumPy를 이용해 벡터를 나타내는 방법

image::./images/2/5-1.PNG[NumPy_Vector]

[source,python]
----
vector_one = np.asarray([
    [1],
    [2],
    [1]
], dtype=np.float32)
----

* 스칼라 계산 방법

[source,python]
----
vector_two = 2*vector_one + 0.5*vector_one
----

== 6. Dot Product
* 마지막으로 중요한 벡터 연산은 내적(Dot Product)
* 내적은 곱셈과 유사하지만 벡터 요소에 곱셈을 포함해야한다.

image::./images/2/6-1.PNG[dot_oroduct]

* 다른 벡터 연산과 달리 내적 결과는 벡터가 아닌 스칼라 값
* 두 벡터사이의 내적을 연산하려면 numpy.dot() 함수를 이용
* 이 함수의 단점은 1개 벡터가 행벡터로 표현되어야하고 다른 벡터는 열 벡터로 표현되어야함

[source,python]
----
vector_dp = np.dot(vector_one[:,0], vector_two)
----

== 7. Linear Combination
* 지금까지 벡터를 스칼라 값으로 곱하고 벡터 합과 벡터 빼기를 이용해 벡터를 결합하는 방법에 대해 배웠다.
* 이 연산을 이용해 벡터를 결합하여 특정 벡터를 얻을수 있다는걸 배움
* 그런데 문제는 다음이다.

image::./images/2/7-1.PNG[문제제기]

* 위 식에서 c1, c2는 상수 변수를 나타낸다. 이 방정식이 참인 c1, c2를 구해야한다.

image::./images/2/7-2.PNG[문제제기]

* 스칼라 곱을 이용해 벡터를 스케일링 할수 있다면 스케일 벡터를 더하거나 빼는 것을 선형 결합이라고 한다.
* 선형결합의 개념을 사용해 다음 문제를 이렇게 말할수 있다.
* [4 -2] 벡터는 [1 2], [3 1] 벡터의 선형 결합인가?

image::./images/2/7-3.PNG[결과]


== 8. Linear Combination And Vectors
* 급여문제로 돌아가서 우리는 다음의 행렬을 사용했다.

image::./images/2/8-1.PNG[1]

* 방금 논의한 벡터 선형조합과 연결시킬수 있다.

image::./images/2/8-2.PNG[2]

* 마지막 임무에서 우리는 행 연산을 사용해 아래 행렬을 사용했다.

image::./images/2/8-3.PNG[1]


== 9. The Matrix Equation
* 행렬방정식에 대해 간략하게 소개한다.
* 행렬방정식은 행렬 및 벡터만을 사용한다.
* 다음은 행렬 방정식의 약식 표현이다.

image::./images/2/8-1.PNG[행렬방정식]

* 일반적인 형태로 변경한 표현식

image::./images/2/9-1.PNG[일반적표현]

* 행렬방정식을 산술표현으로 소개한다.

image::./images/2/9-2.PNG[산술표현]

* A는 계수행렬을 나타내고 x는 솔루션 벡터, b는 상수를 뜻한다.
** b는 0을 포함하고 있는 벡터가 될 수 없다.

* 행렬을 결합할 수 있는 방법 설명하는 규칙
* 행렬을 벡터로 곱셈하는 방법
* 솔루션 벡터를 계산하는 방법 (가우스 소거법을 사용하지 않고)



== 예제 모음

=== 2.

[source,python]
----
import matplotlib.pyplot as plt
import numpy as np

# This code draws the x and y axis as lines.
plt.axhline(0, c='black', lw=0.5)
plt.axvline(0, c='black', lw=0.5)
plt.xlim(-3,3)
plt.ylim(-4,4)

# Add your code here.
plt.quiver(0, 0, 2, 3, angles='xy', scale_units='xy', scale=1, color='blue')

plt.quiver(0, 0, -2, -3, angles='xy', scale_units='xy', scale=1, color='blue')

plt.quiver(0, 0, 1, 1, angles='xy', scale_units='xy', scale=1, color='gold')

plt.quiver(0, 0, 2, 2, angles='xy', scale_units='xy', scale=1, color='gold')
----

image::./images/2/2-4.PNG[결과값]


=== 3.

[source,python]
----
# This code draws the x and y axis as lines.
plt.axhline(0, c='black', lw=0.5)
plt.axvline(0, c='black', lw=0.5)
plt.xlim(-4,4)
plt.ylim(-1,4)

# Add your code here.
plt.quiver(0, 0, 3, 0, angles='xy', scale_units='xy', scale=1)

plt.quiver(3, 0, 0, 3, angles='xy', scale_units='xy', scale=1)

plt.quiver(0, 0, 3, 3, angles='xy', scale_units='xy', scale=1, color='green')
----

image::./images/2/3-6.PNG[결과값]


=== 4.

[source,python]
----
# This code draws the x and y axis as lines.
plt.axhline(0, c='black', lw=0.5)
plt.axvline(0, c='black', lw=0.5)
plt.xlim(0,10)
plt.ylim(0,5)

# Add your code here.
plt.quiver(0, 0, 3, 1, angles='xy', scale_units='xy', scale=1, color="blue")

plt.quiver(0, 0, 6, 2, angles='xy', scale_units='xy', scale=1, color="green")

plt.quiver(0, 0, 9, 3, angles='xy', scale_units='xy', scale=1, color="orange")
----

image::./images/2/4-2.PNG[결과값]


=== 5.

[source,python]
----
import numpy as np

vector_one = np.asarray([
    [1],
    [2],
    [1]
], dtype=np.float32)

vector_two = np.asarray([
    [3],
    [0],
    [1]
], dtype=np.float32)

vector_linear_combination = vector_one * 2 + vector_two * 5
----

=== 6.

[source,python]
----
vector_one = np.asarray([
    [1],
    [2],
    [1]
], dtype=np.float32)

vector_two = np.asarray([
    [3],
    [0],
    [1]
], dtype=np.float32)

dot_product = np.dot(vector_one[:,0], vector_two)
print(dot_product)
----


=== 7.

[source,python]
----
v = np.asarray([
    [3],
    [1]
], dtype=np.float32)

w = np.asarray([
    [1],
    [2]
], dtype=np.float32)

end_point = 2*v - 2*w
----
