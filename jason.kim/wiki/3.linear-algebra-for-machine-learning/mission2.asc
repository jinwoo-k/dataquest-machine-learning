= vectors

== 1. From Matrices To Vectors
* 마지막 임무에서 우리는 선형 함수 시스템을 해결하기 위해, 관계를 유지하는 행렬 연산과 첨가행렬을 사용하는 방법을 배웠습니다.
* 아래와 같은 행렬을 two by three matrix 라고 부른다. (2 x 3)

image::./images/m2_1_1.png[100,200]

* 아래와 같이 행(row)의 요소를 순서대로 나열한 것을 행 벡터(row vector)라 부른다.

image::./images/m2_1_2.png[100,200]

* 아래와 같이 열(col)의 요소를 순서대로 나열한 것을 열 벡터(col vector)라 부른다.

image::./images/m2_1_3.png[300,100]

* 본 미션에서는 선형 시스템의 특정 속성을 이해하는 데 도움이되는 열 벡터 및 관련 작업에 대해 자세히 알아 본다.
* 또한 행렬과 벡터의 주요 아이디어를 연결하여 선형 시스템을 해결하는 마지막 미션에서 사용한 방법을 정당화 하는 법을 배운다.
* 앞으로 벡터라는 단어는 열 벡터를 의미한다.

== 2. Geometric Intuition Of Vectors (벡터의 기하학적 직관)
* 벡터에 2 개 또는 3 개의 요소가 포함돼 있으면 좌표 격자(coordinate grid)에 시각화 할 수 있다.
* 두 요소가 포함 된 벡터의 경우 첫 번째 값은 x 좌표를 나타내고 두 번째 값은 y 좌표를 나타낸다.
* 벡터는 일반적으로 원점(0,0)에서 벡터로 설명 된 점까지 그려진다.
* 벡터는 크기(magnitude)와 방향(direction)으로 이루어지며 화살표로 표기한다.

image::./images/m2_2_1.png[]

* matplotlib의 pyplot.quiver() 함수를 이용해 벡터를 시각화 할 수 있다.

[source,python]
----
plt.quiver(0, 0, 1, 2, angles='xy', scale_units='xy', scale=1, color='blue')
----
image::./images/m2_2_2.png[,400]

== 3. Vector Operations
* 벡터는 매트릭스에서의 열과 같이 덧셈, 뺄셈이 가능하다.

image::./images/m2_3_1.png[100, 200]
image::./images/m2_3_2.png[,400]

image::./images/m2_3_3.png[100, 200]
image::./images/m2_3_4.png[,400]

== 4. Scaling Vectors
* 스칼라 값을 곱하거나 나눠 스케일을 변화할 수 있다.

image::./images/m2_4_1.png[100, 200]

== 5: Vectors In NumPy
* numpy를 이용해 백터를 다루는 법을 배운다.

[source,python]
----
import numpy as np

vector_one = np.asarray([
    [1],
    [2],
    [1]
], dtype=np.float32)

vector_two = np.asarray([
    [3],
    [0],
    [1]
], dtype=np.float32)

vector_linear_combination = vector_one * 2 + vector_two * 5

print(vector_linear_combination)
----

== 6. Dot Product (내적)

image::./images/m2_6_1.png[, 500]

* 다른 벡터 연산과 달리 결과는 스칼라 값이다
[source,python]
----
vector_one = np.asarray([
    [1],
    [2],
    [1]
], dtype=np.float32)

vector_two = np.asarray([
    [3],
    [0],
    [1]
], dtype=np.float32)

dot_product = np.dot(vector_one[:,0], vector_two)
----

== 7. Linear Combination
* 아래와 같이 두개의 벡터를 선형결합해 새로운 벡터를 만들 수 있는지 알고 싶을 수 있다.

image::./images/m2_7_1.png[100, 200]
image::./images/m2_7_2.png[,500]
image::./images/m2_7_3.png[,400]

== 8. Linear Combination And Vectors
* 이전 미션의 최적 급여 문제를 예로 든다. y = 1000 + 30x , y = 100 + 50x  --> 30x − y = −1000  ,  50x − y = −100
* 위의 식을 첨가행렬(augmented matrix)로 표현하면 다음과 같다.

image::./images/m2_8_1.png[100, 200]

* 이를 각 벡터의 선형 결합으로 표현하면 다음과 같다.

image::./images/m2_8_2.png[100, 250]

* 이전 미션에서는 다음과 같은 매트릭스 행연산을 통해 첨가행열을 풀었었다.

image::./images/m2_8_3.png[100, 150]

== 9. The Matrix Equation (행렬방정식)
* 행렬 방정식은 행렬 및 벡터만을 사용하는 선형 시스템의 표현이다.

image::./images/m2_9_1.png[100, 250]
image::./images/m2_9_2.png[100, 100]

* 위의 식에서 A 는 계수 행렬을 나타내고, 벡터x는 해 벡터를, 벡터b는 상수 벡터라 한다.
* b백터는 zero factor 가 아니다. (zero factor : 모든 항목이 0인 벡터)

* 이러한 형태를 이용해 문제를 해결하기 전, 다음 미션에서는 아래와 같은 내용을 다룬다.
1. 행렬의 결합법칙
2. 행렬과 벡터의 곱
3. 가우스 소거법을 이용하지 않고 해 벡터 x를 구하는 법
