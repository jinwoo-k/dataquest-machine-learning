== Linear Systems
=== step.1 Linear Systems
* 이전엔 계산을 배움
** 선형 방정식 기울기 이해
** 비선형 함수의 미분 (기울기를 함수로) 이해
** 비선형 함수에서 극한값 찾기

* linear algebra (선형대수) : 선형방정식 시스템에서 해결책 찾기

=> 두 직선의 방정식을 그림으로 그려서 값 확인
```
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 50, 1000)
y1 = 30 * x + 1000
y2 = 50 * x + 100

plt.plot(x, y1, c='orange')
plt.plot(x, y2, c='blue')
```

=== step.2 Solving Linear Systems By Elimination
* 두 직선을 그렸을 때, 두 점이 만나는 부분이 이 환경의 해결책 (x,y가 같은 점

* 손으로 해결
. y = 으로 두 방정식을 만들고 y 를 소거 후 x 를 계산
. 계산된 x 를 방정식에 대입하여 y 를 구하기

* 추가
** 단, 실제 환경에선 2개 이상의 변수와 함수가 사용되기때문에 손으로 해결 불가
** gaussian eliminattion (가우스제거) 라는 선형 대수학을 사용해 해결 가능 (앞으로 볼 예정)

=== step.3 Representing Functions In General Form
* Linear algebra (선형 대수): 선형시스템 (행렬)과 조작 방법을 표현하는 방법 (대수)를 제공
** 행렬은 선형 시스템의 계수 (앞의 상수)만 표현
** 따라서, 우리의 함수를 일반 형식(위의 표현)으로 재구성 (예: Ax + By = C)

* augmented matrix : 계수를 왼쪽으로, 오른편에는 상수만 표현

image:https://s3.amazonaws.com/dq-content/160/equation_to_matrix.svg[]

=== step.4 Representing An Augmented Matrix In NumPy

```
## output type is numpy.ndarray
matrix_one = np.asarray([
    [30, -1, -1000],
    [50, -1, -100]
], dtype=np.float32)
```
ref : https://docs.scipy.org/doc/numpy/reference/generated/numpy.asarray.html

=== step.5 Matrix Representation Of The Solution
* 원래 손으로 풀었던 해결책을 행렬로 표현하는 방법 확인
** 선형시스템을 해결하기 위해 행렬의 변형을 수행 (단, 모든 선형 시스템에 답이 있는건 아님)

image:https://s3.amazonaws.com/dq-content/160/matrix_to_equation.svg[]

=== step.6 Row Operations
* 방정식에서 행하는 연산과 같음
. 행 두개를 교환 가능
. 행에 0이 아닌 상수값으로 곱 가능
. 한 행에 다른 행을 더해도 됨


```
# 1. 교환 (새로운 row 에 그냥 넣기)
matrix[1] = matrix[2]
# 2. 0이 아닌 상수 곱
matrix[1] = 2*matrix[1]
# 3. 한 행에 다른 행 더하기
matrix[1] = matrix[1] + matrix[2]
```
=== step.7 Simplifying Matrix To Echelon Form
* 행렬의 답을 구하기 위한 첫 단계
** echelon form 으로 재배열 (대각선은 모두 1, 대각선 아래는 모두 0)

=== step.8 Row Reduced Echelon Form
* 행렬의 답을 구하기 위한 두번째 단계
** 행끼리 빼서 재정렬 (대각선 위에서 0 으로 만들기 위한 과정)

=== step.9 Next Step
* 일반적으론 (실상황) y를 하나의 변수 x 에 대해 표현 못함. 
* 3개 이상의 변수에선 쉽게 시각과 못함 (가우시안 제거 수행 힘듦)
