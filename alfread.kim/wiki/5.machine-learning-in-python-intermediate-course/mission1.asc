= Logistic Regression

== 1. Classification
  * 선형 회귀는 우리가 예측하려고하는 대상 열인 종속 변수가 순서가 지정되고 연속일 때 잘 작동함.
  * 대상 열에 불연속 값이 포함되어 있으면 선형 회귀는 적합하지 않음
  * 이 미션에서 분류문제(Classification)로 알려진 문제에 대한 예측 모델을 작성하는 방법을 모색.
    ** 분류에서 우리의 목표 열은 행이 범주형 자료
    ** 정수를 사용하여 여러 범주를 표현
    ** 수학 함수를 사용하여 독립변수가 종속변수에 매핑되는 방식을 설명
  * 바이너리 분류.
     ** 값에 대한 두 가지 옵션
       *** 0 : 거짓 조건
       *** 1 : 참인 조건

== 2. Introduction to the data
  * 신청자가 미국 대학의 대학원 프로그램에 입학 할 것인지 여부를 예측.
    ** gre - 신청자의 Graduate Record Exam 점수, 예비 대학원생을위한 일반 시험
      *** 점수 범위는 200에서 800 사이
    ** gpa - 대학 학점 평균.
      *** 0.0 에서 4.0 사이의 연속된 값
    *  admit :  이진 값
      *** 0 또는 1, 1은  허가 0은 거절을 의미.

image:./images/m1-1.PNG[]

    * admit 열을 예측하기 위해 gpa와 gre 열을 모두 사용할 수 있지만 gpa 열만 사용하여 간단하게 유지
    * pandas로 데이터를 읽고 gpa와 admit 사이의 관계를 시각화

image:./images/m1-2.PNG[]

== 3. Logistic regression
   * 산점도에서는 gpa 열과 승인 열이 명확한 선형 관계를 갖고 있지 않음을 알 수 있다.
   * admit 열에는 값 0과 1 만 포함되며 숫자 자체에는 의미 없음. (범주형 자료형)
   * 분류는 독립변수와 종속변수인 범주형변수간의 관계를 추정하는 데 초점을 둠.
   * 이 미션에서 우리는 로지스틱 회귀 (logistic regression)라는 분류 기법에 중점을 둘 것임.
   * 선형 회귀 모델이 실수를 레이블로 출력하는 반면에 로지스틱 회귀 모델은 확률 값을 출력.
   * 이진 분류에서 확률 값이 특정 임계확률보다 크면 해당 행의 레이블을 1로 지정하고 그렇지 않으면 0으로 지정
   * 이 임계 값 확률은 우리가 선택한 것.
   * 나중 미션에서 좋은 임계 확률을 선택하는 방법에 대해 배울 것임.

== 4. Logit function
   * 선형 회귀 분석에서는 독립 변수와 종속 변수 간의 관계를 나타 내기 위해 선형 함수 y = mx + b를 사용
   * 로지스틱 회귀 분석에서 우리는 분류에 적용되는 선형 함수의 버전 인 logit 함수를 사용
   * 분류 작업에 유용한 이유를 더 잘 이해하기 위해 logit 함수의 속성 중 일부를 살펴봄.

image:./images/m1-3.PNG[]

   * 로짓 함수는 다음 두 부분으로 나뉨.
     ** 모든 값을 양수로 변환하는 지수 변환 : e^t
image:./images/m1-4.PNG[]

     ** 모든 값을 0에서 1 사이의 범위로 변환하는 정규화 변환 : t / (1 + t)
image:./images/m1-5.PNG[]

     ** 지수 변환과 정규화는 출력 값을 0에서 1 사이로 압축.
image:./images/m1-6.PNG[]

   * 이 두 가지 요소는 출력이 확률이 있는 값의 범위(0~1)로 제한되도록 잘 작동.

== 5. Training a logistic regression model
  * scikit-learn에서 로지스틱 회귀 모델을 트레이닝하는 것은 LinearRegression 클래스 대신 LogisticRegression 클래스를 사용
  * 선형 회귀 모델을 트레이닝하는 것과 유사.

```
from sklearn.linear_model import LinearRegression
linear_model = LinearRegression()
linear_model.fit(admissions[["gpa"]], admissions["admit"])

from sklearn.linear_model import LogisticRegression
logistic_model = LogisticRegression()
logistic_model.fit(admissions[["gpa"]], admissions["admit"])
```

== 6. Plotting probabilities











