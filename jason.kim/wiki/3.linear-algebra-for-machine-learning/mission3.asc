= matrix-algebra (행렬 대수)

== 1. Basic Matrix Operations
* 행렬은 하나 이상의 벡터로 구성된다.

image::./images/m3_1_1.png[, 300]

* 동일한 수의 행, 열을 가진 매트릭스끼리는 덧셈이나 뺄셈이 가능하다.

image::./images/m3_1_2.png[, 500]

* 매트릭스는 상수를 곱할 수 있다.

image::./images/m3_1_3.png[, 400]

== 2. Matrix Vector Multiplication
* 행렬에 벡터를 곱하면 행렬의 각 행과 열 벡터가 결합하게 된다. => 매트릭스의 열의 수와 백터의 행의 수가 같아야 함.

image::./images/m3_2_1.png[, 500]

[source,python]
----
import numpy as np

matrix_a = np.asarray([
    [0.7, 3, 9],
    [1.7, 2, 9],
    [0.7, 9, 2]
], dtype=np.float32)

vector_b = np.asarray([
    [1],
    [2],
    [1]
], dtype=np.float32)

ab_product = np.dot(matrix_a, vector_b)
print(ab_product)
----

== 3. Matrix Multiplication
* 매트릭스간 곱을 위해서는 첫번째 매트릭스의 열의 수와 두번째 매트릭스의 행의 수가 같아야 한다.

image::./images/m3_3_1.png[, 600]

* 예제에서는 matrix-a, matrix-b 를 곱한 matrix-ab 와 순서를 바꿔 곱한 matrix-ba 의 결과를 비교해 두개가 같지 않음을 확인한다.

== 4. Matrix Transpose (행렬 전치)
* 행과 열을 바꾸는 것

image::./images/m3_4_1.gif[, 200]

* 전치행렬은 덧셈과 곱셈에 대해 다음과 같은 특성을 갖는다.

image::./images/m3_4_2.png[100]
image::./images/m3_4_3.png[100]

[source,python]
----
matrix_a = np.asarray([
    [0.7, 3],
    [1.7, 2],
    [0.7, 9]
], dtype=np.float32)

matrix_b = np.asarray([
    [113, 3, 10],
    [1, 0, 1],
], dtype=np.float32)

transpose_a = np.transpose(matrix_a)
print(transpose_a)
print(np.transpose(transpose_a))

trans_ba = np.dot(np.transpose(matrix_b), np.transpose(matrix_a))
trans_ab = np.dot(np.transpose(matrix_a), np.transpose(matrix_b))


product_ab = np.dot(matrix_a, matrix_b)
print(np.transpose(product_ab))
----

== 5. Identity Matrix
* 아래의 행렬 방정식에서 A 를 소거하는 방법이 필요하다. -> A를 항등행렬로 만들면 됨

image::./images/m3_5_1.png[50]
image::./images/m3_5_2.png[200]

[source,python]
----
i_2 = np.identity(2)
i_3 = np.identity(3)

matrix_33 = np.asarray([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
], dtype=np.float32)

matrix_23 = np.asarray([
    [1, 2, 3],
    [4, 5, 6]
], dtype=np.float32)

identity_33 = np.dot(i_3, matrix_33)
identity_23 = np.dot(i_2, matrix_23)
----

== 6. Matrix Inverse
* 계수 A를 소거하는 방법은 역행렬을 곱하는 것이다.
* 역행렬은 곱셈의 역수의 개념과 비슷하다.

image::./images/m3_6_1.png[,200]

* 행렬의 역함수 구하는 공식

image::./images/m3_6_2.png[,300]

* ad-bc 는 determinant 라 하며 det(a) = ad - bc 혹은 |a| = ad - bc 로 표현한다.
* 2*2 행렬에서는 ad - bc 가 0이 아닌 경우에만 determinant 가 존재하며 역행렬이 존재한다.

[source,python]
----
matrix_a = np.asarray([
    [1.5, 3],
    [1, 4]
])

def matrix_inverse_two(source):
    a = source[0][0]
    b = source[0][1]
    c = source[1][0]
    d = source[1][1]


    if (det == a*d - b*c):
        raise Exception()

    det = 1 / (a*d - b*c)
    new = np.asarray([
        [d, b * -1],
        [c * -1, a]
    ])
    return det * new



inverse_a = matrix_inverse_two(matrix_a)
i_2 = np.dot(matrix_a, inverse_a)
print(i_2)
----

== 7. Solving The Matrix Equation
[source,python]
----
matrix_a = np.asarray([
    [30, -1],
    [50, -1]
])

matrix_b = np.asarray([
    [-1000],
    [-100]
])

matrix_a_inverse = np.linalg.inv(matrix_a)

solution_x = np.dot(matrix_a_inverse, matrix_b)
----

== 8. Determinant For Higher Dimensions
* 3*3 행렬에 대해 det 구하는 법을 배운다.

image::./images/m3_8_1.png[,600]

* det 를 numpy.linalg.det() 함수를 통해 구하는 법을 배운다.

[source,python]
----
matrix_22 = np.asarray([
    [8, 4],
    [4, 2]
])

matrix_33 = np.asarray([
    [1, 1, 1],
    [1, 1, 6],
    [7, 8, 9]
])

det_22 = numpy.linalg.det(matrix_22)
det_33 =  numpy.linalg.det(matrix_33)
----

== 9. Matrix Inverse For Higher Dimensions
* 3 * 3 행렬의 역행렬 구하는 방법을 알아본다.

image::./images/m3_9_1.png[,600]
