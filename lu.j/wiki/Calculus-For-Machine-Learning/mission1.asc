= Understanding Linear And Nonlinear Functions

== 1. 왜 미적분을 배워야하는가?
* 머신러닝을 위한 선형회귀 모델을 사용하기 전 미적분의 핵심 개념을 이해해야한다.
* 미적분은 수학함수의 작동방식을 이해하기 위한 프레임워크를 제공
** 다양한 지점에서의 가파름을 이해
** 함수에서 극한의 점을 찾음
** 데이터의 집합을 가장 잘 나타내는 최적의 함수를 결정

* 축구선수가 찬 공의 궤적을 설명하는 방정식을 다음과 같이 가정
** y = -(x)^2 + 3x - 1
** x는 시간(초), y는 공의 수직 위치
** 공이 도달한 가장 높은 위치와 그때 어떤 일이 있었는지를
  방정식을 그래프로 나타내고 시각적으로 결과를 예측할 수 있지만 정확한 시간과 수직 위치를
  원한다면 미적분을 사용해야함

image::./images/1_1.PNG[1-1]

== 2. 리니어 함수
* 단순한 직선은 선형 함수로 더 명확하게 정의됨
** y = mx + b

== 3. 기울기와 y절편(slope and Y-intercept)
* m = 기울기, b = y 절편

== 4. Math behind Slope
* 기울기 함수 완성 (slope)

== 5. 비선형 함수
* y = -(x**2) + 3x - 1
* y값은 x값에 비례하지 않음

== 6. Secant Lines
* x1, x2를 다양하게 설정하면 두 점 사이의 기울기가 크게 달라짐
* 곡선에서 두 점과 교차하는 선을 Secant Line(보조선) 이라고 함

image::./images/1-6.PNG[1-6]

image::./images/1-6_2.PNG[1-6-2]

== 7. Secant Lines And Slope
* x1과 x2가 같으면 어떤 일이 일어날까?

== 8. Target Line
* x1과 x2가 같으면 기울기를 구할수가 없다 (undefined)
* 특정 시점의 기울기를 설명하는 것을 순간 변화율이라고 함
* 비선형 함수에서 순간 변화율은 특정 점에서 비선형 함수에 수직인 선의 기울기를 뜻함


== 예제 모음

=== 1.

[source,python]
----
import numpy as np
import matplotlib.pyplot as plt
x = np.linspace(0, 3, 100)
y = -1*(x**2) + x*3 - 1
plt.plot(x,y)
----

=== 4.

[source,python]
----
def slope(x1,x2,y1,y2):
    ## Finish the function here
    m = (y1 - y2) / (x1 - x2)
    return m
slope_one = slope(0,4,1,13)
slope_two = slope(5,-1,16,-2)
----


=== 6.

[source,python]
----
import seaborn
seaborn.set(style='darkgrid')

def draw_secant(x_values):
    x = np.linspace(-20,30,100)
    y = -1*(x**2) + x*3 - 1
    plt.plot(x,y)

    x_0 = x_values[0]
    x_1 = x_values[1]
    y_0 = -1*(x_0**2) + x_0*3 - 1
    y_1 = -1*(x_1**2) + x_1*3 - 1
    m = (y_1 - y_0) / (x_1 - x_0)
    b = y_1 - m*x_1

    y_secant = x*m + b
    plt.plot(x, y_secant, c='green')
    plt.show()
draw_secant([3,5])
draw_secant([3,10])
draw_secant([3,15])
----
