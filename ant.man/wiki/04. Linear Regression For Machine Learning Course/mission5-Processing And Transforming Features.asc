== Processing And Transforming Features
=== 1. Introduce
* feature engineering: 변경하여 새 특성을 만드는 과정. (도메인 지식 있으면 더 좋음)

* 일단 누락값이 없는 컬럼에만 초점을 맞춘다. (아직 선형회귀에 적합하지는 않음) 후반부에 누락 값도 다룰 예정
** 누락값이 없는 열 중에 일반적인 문제
*** 열이 숫자가 아님 (지역 코드가 텍스트)
*** 숫자이지만 서수가 아님 (예: 우편번호)
*** 숫자지만 목표 컬럼과 관계의 타입이 아님 (예: 연도값)

=== 2. Categorical Features
* category features: 한정된 문자 값으로 된 컬럼 (확인 방법 예: `train['Utilities'].value_counts()` )
* 이런 값들을 숫자로 표현 (https://pandas.pydata.org/pandas-docs/stable/categorical.html[카테고리화])

```
text_cols = df_no_mv.select_dtypes(include=['object']).columns

for col in text_cols:
    print(col+":", len(train[col].unique()))
    train[col] = train[col].astype('category')

# 변형 후 .cat 을 호출해야 함. 아래처럼 한번에 하면 오류
#print(train['Utilities'].astype('category').cat.codes.value_counts())
train['Utilities'].cat.codes.value_counts()
```

=== 3. Dummy Coding
* 카테로리화하면 선형회귀의 숫자와 다름 (첫챕터에서 말한대로, 열의 상관성없이 숫자의 증가이므로)
* 해결책으로 https://en.wikipedia.org/wiki/Dummy_variable_%28statistics%29[더미코딩] 기술을 사용함
** n 개의 숫자값을 가진 한개 컬럼 -> n개 컬럼
** https://pandas.pydata.org/pandas-docs/stable/generated/pandas.get_dummies.html[get_dummies] 를 활용
```
for col in text_cols:
    col_dummies = pd.get_dummies(train[col])
    train = pd.concat([train, col_dummies], axis=1)
    del train[col]
```

=== 4. Transforming Improper Numerical Features
* 숫자로 표현되었지만 숫자로써 의미 없어도 변환
** 'Year Remod/Add'
***
** 'Year Built'
*** 언제 지었는지는 얼마나 오래 된지 파악 못함 (예: 1960 지었지만 80년대 판것과 2000년에 판것의 차이)
* 즉, 위 두 열의 차이값으로 새 열을 만들어야 함 -> 도메인 지식 필요
** `train['years_until_remod'] = train['Year Remod/Add'] - train['Year Built']`
* 추가로 리모델링까지 했다면? 이런식의 도메인지식이 정보를 표현하는데 필요 (https://www.import.io/post/how-to-win-a-kaggle-competition/[Kaggle data science competitions])

=== 5. Missing Values
* 누락된 열 처리
** 특정 열에 누락된 열이 포함된 행 제거
*** 장: 깨끗한 데이터만 남음
*** 단: 전체 특성 데이터가 사라져 예측 정확도 떨어짐
** 열의 서술 통계로 대체하거나 삭제
*** 장: 나머지 있는 값을 유지하며 없던걸 잠재 유사 추정으로 대체
*** 단: 잡음이 많아진 데이터에 의지된 모델로 학습함

* 도메인 지식이 있으면 어느정도 값이 없는지 유무의 비율을 할지 도움됨 (대부분 50%)

```
df_missing_values = train[train_null_counts[(train_null_counts>0) & (train_null_counts<584)].index]
```

=== 6. Imputing Missing Values
* 누락 값이있는 숫자 열의 경우 일반적인 전략: 각 열의 평균, 중앙값 또는 최빈수를 계산하고 해당 열의 누락 된 값으로 사용
** https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.fillna.html[pandas.DataFrame.fillna()]

```
float_cols = df_missing_values.select_dtypes(include=['float'])
# df_missing_values.median() , df_missing_values.mode()
float_cols = float_cols.fillna(df_missing_values.mean())
print(float_cols.isnull().sum())
```
