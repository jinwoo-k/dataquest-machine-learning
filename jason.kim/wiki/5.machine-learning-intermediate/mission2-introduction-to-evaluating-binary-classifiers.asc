= Introduction to evaluating binary classifiers

== 1. Introduction to the Data
* 이전장에서 다뤘던 대학입시 결과 데이터를 그대로 이용

[source, python]
----
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression

admissions = pd.read_csv("admissions.csv")
model = LogisticRegression()
model.fit(admissions[["gpa"]], admissions["admit"])
labels = model.predict(admissions[["gpa"]])
admissions['predicted_label'] = pd.Series(labels)
print(admissions['predicted_label'].value_counts())
print(admissions.head(5))
----

== 2. Accuracy
* 에측 정확도는 분류 모델의 효율성을 측정하는 가장 쉬운 방법이다.
* image:./images/m2_2_1.png[, 300]

[source, python]
----
admissions['actual_label'] = admissions['admit']
del admissions['admit']

admissions['matches'] = admissions['actual_label'] == admissions['predicted_label']

correct_predictions = admissions[admissions['matches'] == True]
print(correct_predictions.head(5))

accuracy = len(correct_predictions) / len(admissions)
print(accuracy)
----

== 3. Binary classification outcomes
* 예측 정확도 많으로 모델을 평가하기엔 부족하다.
* 학습 데이터에 대한 예측 정확도는 학습되지 않은 데이터에 대해 설명되지 않는다.
* 트레이닝 데이터를 이용한 모델의 효과 테스트를 통해 바이너리 분류 모델을 평가하는 방법을 살펴본다.
* image:./images/m2_2_2.png[, 400]

== 4. Binary classification outcomes
[source,python]
----
true_positives = len(admissions[admissions['predicted_label'] == True][admissions['actual_label'] == True])
true_negatives = len(admissions[admissions['predicted_label'] == False][admissions['actual_label'] == False])
print(true_positives)
print(true_negatives)
----

== 5. Sensitivity
* sensitivity(True Positive Rate, hit rate, recall, 민감도)
* image:./images/m2_5_1.png[, 300]
* 입학대상인 학생 중 올바르게 예측한 비율
* 긍정적 인 결과를 확인하는데 이 모델이 얼마나 효과적인지를 표현
* 낮은 민감도는 모델의 긍정적인 경우를 잡는데 효과적이지 않다라는 의미
* 암에 걸릴지 예측하는 경우에는 높은 민감도가 필요

== 6. specificity
* specificity(True Negative Rate, 특이성)
* 올바르게 0을 예측한 경우
* image:./images/m2_6_1.png[, 300]
* 부정적인 결과를 식별하는 이 모델이 얼마나 효과적인지를 표현
