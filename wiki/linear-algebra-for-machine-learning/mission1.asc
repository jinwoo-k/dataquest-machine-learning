== linear-systems

 * Overview Of Linear Algebra
   ** 지난장 정리
     *** 선형 함수의 기울기를 이해한다.
     *** 비선형 함수의 미분 (함수로서의 기울기) 이해, 극한값 찾기
   ** 선형 함수에 대한 이해
   ** 선형 대수학 프레임 워크 학습
   ** linear function (선형 함수), linear equations (선형 방정식), linear algebra (선형 대수학)
   ** 최적 급여 문제를 통한 선형 방정식의 특성 파악
      *** 일자리 1 : 주 기본급여 1000, 시간당 30 y = 1000 + 30x
      *** 일자리 2 : 주 기본급여 100, 시간당 50 y = 100 + 50x
      *** image:https://s3.amazonaws.com/dq-content/160/visual_solution.svg[]
 * Solving Linear Systems By Elimination
   ** 위에서 두 방정식이 교차하는 점을 솔루션 이라 하며 plot 을 통해 시각적으로 확인하는 것을 시각적 솔루션이라 함
   ** 변수 제거 방식 : 다른 하나의 식으로 부터 y 또는 x 를 또 다른 식의 변수에 대입하여 해를 구함
   ** 변수가 적은 경우 손으로(?) 산술적 계산으로 구하는게 가능하나 훨씬 복잡한 시스템에는 적용하기 어려움
   ** 많은 실제 시스템은 2 개 이상의 변수와 함수를 사용하여 모델링됨
   ** 이러한 유형의 시스템은 가우스 제거 (Gaussian elimination)라고하는 산술적 제거의 변형을 사용하여 선형 대수학을 사용하여 해결함
   ** 이후 미션에서는 가우스 소거법에 대한 학습을 진행하게 됨
 * Representing Functions In General Form
   ** 이전 코스에서는 선형에 대한 방정식을 기울기 위주로 표현 (Point Slope Form) : 예) y = mx + b
   ** 선형 대수학에서 선형 형식의 함수의 일반적인 표현 형태 (General Form) : 예) ax + by = c
   ** Augmented Matrix (첨가행렬) : 계수부분과 상수부분을 구분
      image:https://s3.amazonaws.com/dq-content/160/equation_to_matrix.svg[]
   ** 참고 : http://blog.naver.com/PostView.nhn?blogId=dydrogud22&logNo=220890474428
 * Representing An Augmented Matrix In NumPy
   ** Augmented Matrix (첨가행렬)을 numpy 의 ndarray 를 이용하여 정의하는 방법에 대한 학습
 * Matrix Representation Of The Solution
   ** 행렬을 이용한 해법
      *** image:https://s3.amazonaws.com/dq-content/160/matrix_to_equation.svg[]
 * Row Operations
   ** matrix[1] = 2*matrix[1] : 상수배
   ** matrix[1] = matrix[1] + matrix[2] : 다른 로우와의 산술연산
   ** matrix[1] = 0.5*matrix[2] + matrix[1] + matrix[3] : 복합 연산
      image:https://s3.amazonaws.com/dq-content/160/matrix_row_operations.svg[]
 * Simplifying Matrix To Echelon Form ([행]사다리꼴 행렬로 간소화)
   ** 위의 Row Operation 을 이용하여 사다리꼴 행렬로 간소화 진행
      *** 전체가 0으로 구성되지 않은 행이 있다면, 처음으로 오는 0이 아닌 숫자는 1이어야 하며 이를 Leading 1 이라고 함
      *** 전체가 0으로 구성된 행이 있다면 그것들을 모아 행렬의 가장 아래에 위치시킨다.
      *** 전체가 0으로 구성되지 않은 2개의 연속된 행에서 아래행의 Leading 1 은 윗행의 Leading 1 보다 더 오른쪽에 있어야 함
      *** image:https://s3.amazonaws.com/dq-content/160/echelon_one.svg[]
      *** image:https://s3.amazonaws.com/dq-content/160/echelon_two.svg[]
      *** image:https://s3.amazonaws.com/dq-content/160/echelon_three.svg[]
   ** 참고 : https://ko.wikipedia.org/wiki/%EC%82%AC%EB%8B%A4%EB%A6%AC%EA%BC%B4%ED%96%89%EB%A0%AC
 * Reduced Row Echelon Form (기약 행사다리꼴 행렬)
   ** 아래의 조건을 만족해야 함
      *** 전체가 0으로 구성되지 않은 행이 있다면, 처음으로 오는 0이 아닌 숫자는 1이어야 하며 이를 Leading 1 이라고 함
      *** 전체가 0으로 구성된 행이 있다면 그것들을 모아 행렬의 가장 아래에 위치시킨다.
      *** 전체가 0으로 구성되지 않은 2개의 연속된 행에서 아래행의 Leading 1 은 윗행의 Leading 1 보다 더 오른쪽에 있어야 함
      *** **Leading 1 을 포함하는 각 열은 Leading 1 의 위아래가 0 이어야 함**
 * Next Step
   ** 3개 이상의 변수가 있는 고차원 선형 방정식에 대한 방법에 대한 학습
   ** a1x1 + a2x2 + a3x3 + ... + anxn = c
   ** image:https://s3.amazonaws.com/dq-content/160/higher_order_system.svg[]

== 활용 주요 function
 * 라이브러리 사용 선언
   ** import numpy as np
   ** import matplotlib.pyplot as plt
 * function
   ** np.linspace : 시작점과 끝점 사이에 균등하게 정해진 값들을 생성해 줌
   ** plot 함수 예제
     *** plt.plot(x,y)
     *** plt.plot(x, x*m + b, c='green') : m, b 는 상수
   ** np.asarray([[],[]], dtype=np.float32) : float32 타입의 2차원 배열 생성
   ndarray : numpy 에서의 N 차원 배열 객체를 말하며, 같은 타입으로만 생성 됨 (명령어는 아님)