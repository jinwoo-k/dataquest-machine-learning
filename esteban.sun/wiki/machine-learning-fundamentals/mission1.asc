== AirBnB 사례를 이용한 K-Nearest

 * 가장 근접한 성향을 가지는 k 개의 값의 평균을 이용
 * 근접한 성혱을 측정하기 위하여 Euclidean Distance 를 이용
 * Euclidean Distance = sqrt(pow(q1-p1) + pow(q2-p2) + ... + pow(qn-pn))
 * univariate case 는 단순화 가능 : abs(q1-p1)
 * 반복 학습시 특정 갯수만 이용하면 동일 셋이 계속 이용되므로 랜덤을 이용

== pandas/numpy 활용 주요 function
 * 라이브러리 사용 선언
   ** import pandas as pd
   ** import numpy as np
 * function
   ** 입력
     *** pd.read_csv : csv loading 예) dc_listings = pd.read_csv('dc_airbnb.csv')
   ** 작업
     *** apply : 예) dc_listings['accommodates'].apply(lambda x: np.abs(x - new_listing))
     *** np.random.seed(1) : Random 관련
     *** loc : 신규 랜덤 데이터 프레임 생성 예) dc_listings.loc[np.random.permutation(len(dc_listings))]
     *** sort : dc_listings.sort_values('field')
     *** iloc : 특정 row 데이터 선택 예) dc_listings.iloc[0], dc_listings.iloc[0:10]
     *** [] : 특정 필드 선택 예) dc_listings['field'])
     *** value_counts : 필드 값들에 대한 동일 값 별 갯수 리스트 예) dc_listings['distance'].value_counts()
     *** str.replace : 문자열 replace 예) dc_listings['price'].str.replace('$', '')
     *** astype : type conversion 예) dc_listings['price'].astype('float')
     *** mean : 평균 예) dc_listings.iloc[0:10]['price'].mean()
  ** 출력 함수
   *** print : 출력 예) print(dc_listings.iloc[0])
