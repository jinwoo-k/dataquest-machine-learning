= Linear Systems

== 1. Overview of Linear Algebra
* 지난 미션에서 배운것
** 선형 함수의 기울기를 이해
** 비선형 함수의 미분을 이해
** 비선형 함수에서 극한값 찾기

* 이번 미션에서는 선형 함수를 이해하는데 초점을 맞춘다.

* 2가지 직업 사이에서 선택을 해야한다고 생각해보자.
** 첫번째 직업은 주당 500달러, 시간당 30달러가 지급
** 주급 계산식 : y = 500 + 30x
** 두번째 직업은 기본 주당 급여가 100달러, 시간당 50달러
** 주급 계산식 : y = 100 + 50x
** 매주 일하고 싶은 시간의 수 (x)를 알면 근무시간동안 어떤 직업이 더 많은 돈을 벌게 해주는지 알 수 있다.

*** 어떤 근무시간에 같은 금액을 낼 수 있는지?
*** 두번째 직업보다 첫번째 직업에서 더 많은 돈을 벌기위해 몇시간 동안 일해야하는가?

** 위 질문에 대답하려면 y값이 같은 x값을 찾아야한다. 그 후 두번째 질문에 답을 쉽게 찾을수 있다.

== 2. Solving Linear Systems By Elimination

image::./images/2-1.PNG[결과값]

image::./images/2-2.PNG[결과값]

* 결국 값은 (45, 2350)

== 3. Representing Functions In General Form
* y = mx + b
* 선형대수학에서는
** Ax + By = c

* mx - y = -b
** 30x -  y = -1000
** 50x - y = -100

image::./images/3-1.PNG[선형대수Matrix]

image::./images/3-2.PNG[선형대수Matrix]

== 4. Representing An Augmented Matrix In Numpy
* Matrix를 NumPy를 이용해 설정하는 방법

[source,python]
----
matrix_one = np.asarray([
    [0, 0, 0],
    [0, 0, 0]
])
----

* 정밀도를 위해 float32로 설정

[source,python]
----
matrix_one = np.asarray([
    [30, -1, -1000],
    [50, -1, -100]
], dtype=np.float32)
----


== 5. Matrix Representation Of The Solution
* 이전에 손으로 구했던 결과값을 행렬로 표현하는 방법은 아래와 같다. (45,2350)

image::./images/5-1.PNG[결과행렬표현]

image::./images/5-2.PNG[결과]

== 6. Row Operations
* 우리는 다음과 같이 row operations만 이용할 수 있다.

image::./images/6-1.PNG[결과]

* 행연산은 함수가 방정식 형식일때 수행할 수 있는 동일한 허용연산이다.
* NumPy를 이용해보자.
** NumPy의 ndarray 객체에서 2개의 행을 교환하려면 교체할 행에 새 행을 할당

[source,python]
----
matrix =  np.asarray([
    [1, 3],
    [50, 2]
], dtype=np.float32)
# Swap the second row (at index value 1) and the third row (at index value 2).
matrix[1] = matrix[2]
----

** 행에 0이 아닌 상수를 곱하려면 행을 선택하고 * 연산자를 사용해 모든 값에 스칼라 값을 곱한 다음 변환된 행을 다시 할당

[source,python]
----
# Multipy the second row by 2.
matrix[1] = 2*matrix[1]
----

** 한 행을 다른 행에 추가하려면 두 행을 모두 추가한 다음 덮어 쓰려는 행에 재할당

[source,python]
----
# Add the second row to the first row.
matrix[1] = matrix[1] + matrix[2]
----

** 마지막으로 이러한 규칙을 결합 및 연결해 보다 복잡한 행 변환을 수행할 수 있다.

[source,python]
----
matrix[1] = 0.5*matrix[2] + matrix[1] + matrix[3]
----

== 7. Simplifying Matrix To Echelon Form
* 행렬의 해를 구하려면 2가지 주요 단계가 있다.
** 매트릭스를 echelon 형태로 재배치
*** 이 형식에서 대각선 위치 값은 모두 1이고 대각선 아래 값은 모두 0과 같다.

image::./images/7-1.PNG[결과]

** 첫번째 행이 대각선 값이 1이 되도록 첫번째 행을 30으로 나눔

image::./images/7-2.PNG[결과]

** 그다음 두번째 행에서 첫번째 행의 50배를 뺌

image::./images/7-3.PNG[결과]

== 8. Row Reduced Echelon Form
* 두번째 단계는 행렬을 Echelon 형태로 재배치 하는 것
* 마지막 단계는 첫번째 행의 두번째 값을 0으로 만드는 일이다.

image::./images/8-1.PNG[결과]

== 9. Next Steps
* 대부분 실제 상황에서 종속변수 y는 하나의 x가 아닌 여러개의 독립변수에 연결된다.

image::./images/9-1.PNG[결과]

image::./images/9-2.PNG[결과]

* 변수가 3개 이상은 쉽게 시각화 하기 어렵다. 그리고 가우시안 elimination을 수행하는 것이 훨씬 더 어렵다.
* 다음 미션에서는 선형대수학 뒤 이론과 고차 선형 시스템을 해결하는 것을 배울것이다.

== 예제 모음

=== 1.

[source,python]
----
import numpy as np
import matplotlib.pyplot as plt
x = np.linspace(0, 50, 1000)
y1 = 30 * x + 1000

y2 = 50 * x + 100

plt.plot(x, y1, c="orange")
plt.plot(x, y2, c="blue")
----

image::./images/1.PNG[결과값]


=== 6.

[source,python]
----
matrix_one = np.asarray([
    [30, -1, -500],
    [50, -1, -100]
], dtype=np.float32)
matrix_one[0] = matrix_one[0]/30
----


=== 8.

[source,python]
----
matrix_three = np.asarray([
    [1, -1/30, -1000/30],
    [0, 1, 2350]
], dtype=np.float32)

matrix_three[0] += matrix_three[1]/30
print(matrix_three)
----
